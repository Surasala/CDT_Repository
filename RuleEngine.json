{
    "applicationName": "Matrix1",
    "testType": "api",
    "customerName": "CXPM1",
    "useCaseName": "Rule_engine1",
    "testSuiteFiles": [
        {
            "filePath": "e2e/api/Matrix1/CXPM1/Rule_engine1",
            "fileName": "Matrix1-CXPM1-Rule_engine1.cy.js",
            "fileType": "Test-Suite",
            "fileData": "import { Utils } from '../../support/utils';\nimport '../../support/api-beforeAfterBlock';\nimport \"./General_POST_api_v1_iam_token\";\n\n\n\nlet config;\nlet usecasename = 'Rule_engine1'\nlet specfilename = 'Matrix1-CXPM1-Rule_engine1'\nlet configPath, execLogObj;\nlet apiDiffResponse = {}\n\ndescribe('Testing Matrix1 for CXPM1-Rule_engine1', () => {\n  before(() => {\n    configPath = `cypress/e2e/${Cypress.env('integrationFolder')}/${usecasename}-config.json`;\n    cy.before(config, configPath, execLogObj, usecasename, apiDiffResponse).then(value => {\n      ({config, execLogObj, configPath, apiDiffResponse} = value)\n    });\n  });\n  after(() => {\n    cy.after(config, execLogObj, configPath, apiDiffResponse).then(value => ({config, execLogObj} = value));\n  });\n  it('Testing General_POST_api_v1_iam_token', () => {\n    cy.on('fail',(err,runnable)=>{\n        let error= JSON.stringify(err)\n        let index = execLogObj.testCases.length-1\n        if(index>=0){\n            execLogObj.testCases[execLogObj.testCases.length-1].childTestCases.push({\n              name:'***************ERROR !! *****************         '+ error,\n              passFailFlag: 'Fail',\n              duration:Utils.calcTimeDuration(config.currentTs, (new Date()).getTime())\n          })\n          execLogObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\n          execLogObj.testCases[index].passFailFlag =  'Fail'\n        }          \n        throw err;\n    }).then(()=>{\n        cy.task('setLogObject',{val:execLogObj,num:3})\n      })           \n    var argsObj = {\n        \tpayload:config.payload,\n    };\n    cy.General_POST_api_v1_iam_token(config, '1000', argsObj, execLogObj).then((response) => {              \n          \n    }); \n});\n\n});\n"
        },
        {
            "filePath": "e2e/api/Matrix1/CXPM1/Rule_engine1",
            "fileName": "General_POST_api_v1_iam_token.js",
            "fileType": "Test-Case",
            "fileData": "import { Utils } from '../../support/utils';\r\nimport '@shelex/cypress-allure-plugin';\r\n\r\nCypress.Commands.add( \"General_POST_api_v1_iam_token\", (config, ticketNbr, argsObj, logObj ) => {\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs = startTs;\r\n    let accessToken = \"\";\r\n    let refreshToken = \"\";\r\n    let tenant =argsObj.payload.tenant\r\n    let logindetails={\r\n      \"email\":argsObj.payload.username,\r\n      \"password\":argsObj.payload.password\r\n\r\n    };\r\n    let random_number = Math.floor(Math.random() * 1000000000000) + 1;\r\n\r\n /*================================================================= START OF TOKEN API=============================================== */\r\n   \r\n  cy.request({\r\n    method:  \"POST\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/iam/token\",\r\n    headers: {\r\n      'Authorization': 'basic ' + btoa(argsObj.payload.username + ':' + argsObj.payload.password),\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: logindetails ? logindetails : {}\r\n  }).then(resp => {\r\n    logObj.testCases.push({\r\n      name:  \"Get Token\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    accessToken = resp.body.access;\r\n    refreshToken = resp.body.refresh;\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Ensuring access and refresh token values ',\r\n                json: {\"accessToken value- \":resp.body.access, \"refreshToken value-\":resp.body.refresh},\r\n                passFailFlag: resp.body.access !== null && resp.body.refresh !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n\r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n    /*================================================================= END OF TOKEN API=============================================== */\r\n\r\n\r\n\r\n    /*================================================================= START OF GET Trigger_Window API==================================== */\r\n\r\n\r\n \r\n  cy.request({\r\n    method:  \"GET\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/rules_engine/trigger-windows\",\r\n    headers: {\r\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: {} \r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"List of Trigger_Window\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n        logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing count captured',\r\n                json: {\"Value captured from response\":resp.body.count,\r\n                    \"Value captured from output parameter\":argsObj.Count\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n})\r\n\r\n    /*================================================================= END OF GET Trigger_Window API==================================== */\r\n\r\n\r\n    /*================================================================= START OF POST_Trigger_window_Create  API=============================================== */\r\n\r\n\r\nargsObj.payload.tc3_RuleEngine.POST_Trigger_window_Create.name= `Triggerwindow${random_number}`  \r\n  cy.request({\r\n    method:  \"POST\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/rules_engine/trigger-windows\",\r\n    headers: {\r\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: argsObj.payload.tc3_RuleEngine.POST_Trigger_window_Create ? argsObj.payload.tc3_RuleEngine.POST_Trigger_window_Create: {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    cy.wrap(resp.body.id).as('Trigger_Window_id').then(()=>{\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Create_Trigger_window\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"201\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime() \r\n        logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing Name captured',\r\n                json: {\"Name captured from response\":resp.body.name,\r\n                    \"Value captured from output parameter\":argsObj.Count\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime() \r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n})\r\n    /*================================================================= END OF POST_Trigger_window_Create API=============================================== */\r\n\r\n    /*================================================================= START OF GET_Trigger_window API=============================================== */\r\ncy.get('@Trigger_Window_id').then((Trigger_Window_id)=>{\r\n  cy.request({\r\n    method:  \"GET\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/rules_engine/trigger-windows/\" + Trigger_Window_id,\r\n    headers: {\r\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Details of Created Trigger_window\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n        logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing count captured',\r\n                json: {\"Id Value captured from response\":resp.body.id,\r\n                    \"Value captured from output parameter\":argsObj.Count\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()         \r\n        \r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n})\r\n    /*================================================================= END OF GET_Trigger_window API=============================================== */\r\n    \r\n    /*================================================================= START OF PUT_Trigger_window API=============================================== */\r\n\r\n\r\n  argsObj.payload.tc3_RuleEngine.Put_Trigger_Window_Update.name = `UpdateTriggerWindow${random_number}`\r\n  cy.get('@Trigger_Window_id').then((Trigger_Window_id)=>{\r\n      \r\n  \r\n  cy.request({\r\n    method:  \"PUT\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/rules_engine/trigger-windows/\" + Trigger_Window_id,\r\n    headers: {\r\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: argsObj.payload.tc3_RuleEngine.Put_Trigger_Window_Update ? argsObj.payload.tc3_RuleEngine.Put_Trigger_Window_Update : {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Update_Trigger_window\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing active status captured',\r\n                json: {\"Active status captured from response\":resp.body.active,\r\n                    \"active status captured from output parameter\":argsObj.active\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime() \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n})\r\n      /*================================================================= END OF PUT_Trigger_window API=============================================== */\r\n    \r\n\r\n      \r\n      /*================================================================= START OF GET_Rule_Trigger API=============================================== */\r\n\r\n  \r\n\r\n\r\n\r\n  \r\n  cy.request({\r\n    method:  \"GET\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/rules_engine/rule-triggers/views\",\r\n    headers: {\r\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"List of Rule_Trigger\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n        logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing count captured',\r\n                json: {\"Count value captured from response\":resp.body.count,\r\n                    \"Value captured from output parameter\":argsObj.count\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n\r\n      /*================================================================= END OF GET_Rule_Trigger API=============================================== */\r\n\r\n\r\n      /*================================================================= START OF POST_Rule_Trigger API=============================================== */\r\n\r\n\r\n\r\nargsObj.payload.tc3_RuleEngine.Post_Rule_Trigger_Create.name= `RuleTrigger${random_number}`  \r\n  cy.request({\r\n    method:  \"POST\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/rules_engine/rule-triggers\",\r\n    headers: {\r\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: argsObj.payload.tc3_RuleEngine.Post_Rule_Trigger_Create ? argsObj.payload.tc3_RuleEngine.Post_Rule_Trigger_Create : {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    cy.wrap(resp.body.id).as('Rule_Trigger_id').then(()=> {\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Create Rule_Trigger\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"201\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n        logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing ID captured',\r\n                json: {\"ID value captured from response\":resp.body.id,\r\n                    \"Value captured from output parameter\":argsObj.Count\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n})\r\n\r\n\r\n      /*================================================================= END OF POST_Rule_Trigger API=============================================== */\r\n\r\n\r\n      /*================================================================= START OF GET_Rule_Trigger API=============================================== */\r\ncy.get('@Rule_Trigger_id').then((Rule_Trigger_id)=>{\r\n  cy.request({\r\n    method:  \"GET\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/rules_engine/rule-triggers/\" + Rule_Trigger_id,\r\n    headers: {\r\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Rule_Trigger_Details\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing Name captured',\r\n                json: {\"Name captured from response\":resp.body.name,\r\n                    \"name captured from output parameter\":argsObj.name\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n})\r\n\r\n\r\n      /*================================================================= END OF GET_Rule_Trigger API=============================================== */\r\n\r\n     /*================================================================= START OF PUT_Rule_Trigger API=============================================== */\r\nargsObj.payload.tc3_RuleEngine.Put_Rule_Trigger_Update.name = `UpdateNorthBound${random_number}`\r\ncy.get('@Rule_Trigger_id').then((Rule_Trigger_id)=>{ \r\n  cy.request({\r\n    method:  \"PUT\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/rules_engine/rule-triggers/\" + Rule_Trigger_id,\r\n    headers: {\r\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: argsObj.payload.tc3_RuleEngine.Put_Rule_Trigger_Update ? argsObj.payload.tc3_RuleEngine.Put_Rule_Trigger_Update : {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Update_Rule_Trigger\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing priority captured',\r\n                json: {\"priority is captured from response\":resp.body.priority,\r\n                    \"Value captured from output parameter\":argsObj.priority\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n\r\n})\r\n     /*================================================================= END OF PUT_Rule_Trigger API=============================================== */\r\n\r\n    /*================================================================= START OF GET_Rule_Action API=============================================== */\r\n\r\n \r\n  cy.request({\r\n    method:  \"GET\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/rules_engine/rule-actions\",\r\n    headers: {\r\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Rule_Action_List\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n        logObj.testCases[index].childTestCases.push({\r\n                  name: 'Comparing Count captured',\r\n                  json: {\"Count value is captured from response\":resp.body.count,\r\n                      \"Value captured from output parameter\":argsObj.Count\r\n                  },\r\n                  passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                  });\r\n                  config.currentTs= startTs = (new Date()).getTime()\r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n\r\n\r\n    /*================================================================= END OF GET_Rule_Action API=============================================== */\r\n\r\n\r\n    /*================================================================= START OF POST_Rule_Action API=============================================== */\r\n\r\nargsObj.payload.tc3_RuleEngine.post_Rule_Action_Create.name= `RuleAction${random_number}` \r\n\r\n  cy.request({\r\n    method:  \"POST\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/rules_engine/rule-actions\",\r\n    headers: {\r\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: argsObj.payload.tc3_RuleEngine.post_Rule_Action_Create ? argsObj.payload.tc3_RuleEngine.post_Rule_Action_Create :  {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    cy.wrap(resp.body.id).as('Rule_Action_id').then(()=> {\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Create_Rule_Action\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"201\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n       logObj.testCases[index].childTestCases.push({\r\n                  name: 'Comparing ID captured',\r\n                  json: {\"ID is captured from response\":resp.body.id,\r\n                      \"Value captured from output parameter\":argsObj.Count\r\n                  },\r\n                  passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                  });\r\n                  config.currentTs= startTs = (new Date()).getTime() \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n})\r\n    /*================================================================= END OF POST_Rule_Action API=============================================== */\r\n\r\n    /*================================================================= START OF GET_Rule_Action API=============================================== */\r\n\r\ncy.get('@Rule_Action_id').then((Rule_Action_id)=>{\r\n\r\n  cy.request({\r\n    method:  \"GET\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/rules_engine/rule-actions/\" + Rule_Action_id,\r\n    headers: {\r\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Rule_Action_Details\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n       logObj.testCases[index].childTestCases.push({\r\n                  name: 'Comparing Id captured',\r\n                  json: {\"ID value is captured from response\":resp.body.id,\r\n                      \"Value captured from output parameter\":argsObj.Count\r\n                  },\r\n                  passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                  });\r\n                  config.currentTs= startTs = (new Date()).getTime()  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n})\r\n    /*================================================================= END OF GET_Rule_Action API=============================================== */\r\n\r\n    /*================================================================= START OF PUT_Rule_Action API=============================================== */\r\n\r\n\r\nargsObj.payload.tc3_RuleEngine.put_Rule_Action_Update.name = `PUTRuleAction${random_number}`\r\ncy.get('@Rule_Action_id').then((Rule_Action_id)=>{\r\n  cy.request({\r\n    method:  \"PUT\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/rules_engine/rule-actions/\" + Rule_Action_id,\r\n    headers: {\r\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: argsObj.payload.tc3_RuleEngine.put_Rule_Action_Update ? argsObj.payload.tc3_RuleEngine.put_Rule_Action_Update : {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Update_Rule_Action\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n       logObj.testCases[index].childTestCases.push({\r\n                  name: 'Comparing priority captured',\r\n                  json: {\"priority is captured from response\":resp.body.priority,\r\n                      \"priority captured from output parameter\":argsObj.priority\r\n                  },\r\n                  passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                  });\r\n                  config.currentTs= startTs = (new Date()).getTime()  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n})\r\n    /*================================================================= END OF PUT_Rule_Action API=============================================== */\r\n\r\n});"
        },
        {
            "filePath": "e2e/api/Matrix1/CXPM1/Rule_engine1",
            "fileName": "Rule_engine1",
            "fileType": "Build-Payload",
            "fileData": "[{\"specFileData\":\"import { Utils } from '../../support/utils';\\r\\nimport '@shelex/cypress-allure-plugin';\\r\\n\\r\\nCypress.Commands.add( \\\"General_POST_api_v1_iam_token\\\", (config, ticketNbr, argsObj, logObj ) => {\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs = startTs;\\r\\n    let accessToken = \\\"\\\";\\r\\n    let refreshToken = \\\"\\\";\\r\\n    let tenant =argsObj.payload.tenant\\r\\n    let logindetails={\\r\\n      \\\"email\\\":argsObj.payload.username,\\r\\n      \\\"password\\\":argsObj.payload.password\\r\\n\\r\\n    };\\r\\n    let random_number = Math.floor(Math.random() * 1000000000000) + 1;\\r\\n\\r\\n /*================================================================= START OF TOKEN API=============================================== */\\r\\n   \\r\\n  cy.request({\\r\\n    method:  \\\"POST\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/iam/token\\\",\\r\\n    headers: {\\r\\n      'Authorization': 'basic ' + btoa(argsObj.payload.username + ':' + argsObj.payload.password),\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: logindetails ? logindetails : {}\\r\\n  }).then(resp => {\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Get Token\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    accessToken = resp.body.access;\\r\\n    refreshToken = resp.body.refresh;\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Ensuring access and refresh token values ',\\r\\n                json: {\\\"accessToken value- \\\":resp.body.access, \\\"refreshToken value-\\\":resp.body.refresh},\\r\\n                passFailFlag: resp.body.access !== null && resp.body.refresh !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n    /*================================================================= END OF TOKEN API=============================================== */\\r\\n\\r\\n\\r\\n\\r\\n    /*================================================================= START OF GET Trigger_Window API==================================== */\\r\\n\\r\\n\\r\\n \\r\\n  cy.request({\\r\\n    method:  \\\"GET\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/rules_engine/trigger-windows\\\",\\r\\n    headers: {\\r\\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: {} \\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"List of Trigger_Window\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n        logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing count captured',\\r\\n                json: {\\\"Value captured from response\\\":resp.body.count,\\r\\n                    \\\"Value captured from output parameter\\\":argsObj.Count\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n})\\r\\n\\r\\n    /*================================================================= END OF GET Trigger_Window API==================================== */\\r\\n\\r\\n\\r\\n    /*================================================================= START OF POST_Trigger_window_Create  API=============================================== */\\r\\n\\r\\n\\r\\nargsObj.payload.tc3_RuleEngine.POST_Trigger_window_Create.name= `Triggerwindow${random_number}`  \\r\\n  cy.request({\\r\\n    method:  \\\"POST\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/rules_engine/trigger-windows\\\",\\r\\n    headers: {\\r\\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: argsObj.payload.tc3_RuleEngine.POST_Trigger_window_Create ? argsObj.payload.tc3_RuleEngine.POST_Trigger_window_Create: {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    cy.wrap(resp.body.id).as('Trigger_Window_id').then(()=>{\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Create_Trigger_window\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"201\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime() \\r\\n        logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing Name captured',\\r\\n                json: {\\\"Name captured from response\\\":resp.body.name,\\r\\n                    \\\"Value captured from output parameter\\\":argsObj.Count\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime() \\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n})\\r\\n    /*================================================================= END OF POST_Trigger_window_Create API=============================================== */\\r\\n\\r\\n    /*================================================================= START OF GET_Trigger_window API=============================================== */\\r\\ncy.get('@Trigger_Window_id').then((Trigger_Window_id)=>{\\r\\n  cy.request({\\r\\n    method:  \\\"GET\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/rules_engine/trigger-windows/\\\" + Trigger_Window_id,\\r\\n    headers: {\\r\\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Details of Created Trigger_window\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n        logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing count captured',\\r\\n                json: {\\\"Id Value captured from response\\\":resp.body.id,\\r\\n                    \\\"Value captured from output parameter\\\":argsObj.Count\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()         \\r\\n        \\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n})\\r\\n    /*================================================================= END OF GET_Trigger_window API=============================================== */\\r\\n    \\r\\n    /*================================================================= START OF PUT_Trigger_window API=============================================== */\\r\\n\\r\\n\\r\\n  argsObj.payload.tc3_RuleEngine.Put_Trigger_Window_Update.name = `UpdateTriggerWindow${random_number}`\\r\\n  cy.get('@Trigger_Window_id').then((Trigger_Window_id)=>{\\r\\n      \\r\\n  \\r\\n  cy.request({\\r\\n    method:  \\\"PUT\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/rules_engine/trigger-windows/\\\" + Trigger_Window_id,\\r\\n    headers: {\\r\\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: argsObj.payload.tc3_RuleEngine.Put_Trigger_Window_Update ? argsObj.payload.tc3_RuleEngine.Put_Trigger_Window_Update : {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Update_Trigger_window\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing active status captured',\\r\\n                json: {\\\"Active status captured from response\\\":resp.body.active,\\r\\n                    \\\"active status captured from output parameter\\\":argsObj.active\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime() \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n})\\r\\n      /*================================================================= END OF PUT_Trigger_window API=============================================== */\\r\\n    \\r\\n\\r\\n      \\r\\n      /*================================================================= START OF GET_Rule_Trigger API=============================================== */\\r\\n\\r\\n  \\r\\n\\r\\n\\r\\n\\r\\n  \\r\\n  cy.request({\\r\\n    method:  \\\"GET\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/rules_engine/rule-triggers/views\\\",\\r\\n    headers: {\\r\\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"List of Rule_Trigger\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n        logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing count captured',\\r\\n                json: {\\\"Count value captured from response\\\":resp.body.count,\\r\\n                    \\\"Value captured from output parameter\\\":argsObj.count\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n\\r\\n      /*================================================================= END OF GET_Rule_Trigger API=============================================== */\\r\\n\\r\\n\\r\\n      /*================================================================= START OF POST_Rule_Trigger API=============================================== */\\r\\n\\r\\n\\r\\n\\r\\nargsObj.payload.tc3_RuleEngine.Post_Rule_Trigger_Create.name= `RuleTrigger${random_number}`  \\r\\n  cy.request({\\r\\n    method:  \\\"POST\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/rules_engine/rule-triggers\\\",\\r\\n    headers: {\\r\\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: argsObj.payload.tc3_RuleEngine.Post_Rule_Trigger_Create ? argsObj.payload.tc3_RuleEngine.Post_Rule_Trigger_Create : {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    cy.wrap(resp.body.id).as('Rule_Trigger_id').then(()=> {\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Create Rule_Trigger\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"201\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n        logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing ID captured',\\r\\n                json: {\\\"ID value captured from response\\\":resp.body.id,\\r\\n                    \\\"Value captured from output parameter\\\":argsObj.Count\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n})\\r\\n\\r\\n\\r\\n      /*================================================================= END OF POST_Rule_Trigger API=============================================== */\\r\\n\\r\\n\\r\\n      /*================================================================= START OF GET_Rule_Trigger API=============================================== */\\r\\ncy.get('@Rule_Trigger_id').then((Rule_Trigger_id)=>{\\r\\n  cy.request({\\r\\n    method:  \\\"GET\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/rules_engine/rule-triggers/\\\" + Rule_Trigger_id,\\r\\n    headers: {\\r\\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Rule_Trigger_Details\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing Name captured',\\r\\n                json: {\\\"Name captured from response\\\":resp.body.name,\\r\\n                    \\\"name captured from output parameter\\\":argsObj.name\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n})\\r\\n\\r\\n\\r\\n      /*================================================================= END OF GET_Rule_Trigger API=============================================== */\\r\\n\\r\\n     /*================================================================= START OF PUT_Rule_Trigger API=============================================== */\\r\\nargsObj.payload.tc3_RuleEngine.Put_Rule_Trigger_Update.name = `UpdateNorthBound${random_number}`\\r\\ncy.get('@Rule_Trigger_id').then((Rule_Trigger_id)=>{ \\r\\n  cy.request({\\r\\n    method:  \\\"PUT\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/rules_engine/rule-triggers/\\\" + Rule_Trigger_id,\\r\\n    headers: {\\r\\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: argsObj.payload.tc3_RuleEngine.Put_Rule_Trigger_Update ? argsObj.payload.tc3_RuleEngine.Put_Rule_Trigger_Update : {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Update_Rule_Trigger\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing priority captured',\\r\\n                json: {\\\"priority is captured from response\\\":resp.body.priority,\\r\\n                    \\\"Value captured from output parameter\\\":argsObj.priority\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n\\r\\n})\\r\\n     /*================================================================= END OF PUT_Rule_Trigger API=============================================== */\\r\\n\\r\\n    /*================================================================= START OF GET_Rule_Action API=============================================== */\\r\\n\\r\\n \\r\\n  cy.request({\\r\\n    method:  \\\"GET\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/rules_engine/rule-actions\\\",\\r\\n    headers: {\\r\\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Rule_Action_List\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n        logObj.testCases[index].childTestCases.push({\\r\\n                  name: 'Comparing Count captured',\\r\\n                  json: {\\\"Count value is captured from response\\\":resp.body.count,\\r\\n                      \\\"Value captured from output parameter\\\":argsObj.Count\\r\\n                  },\\r\\n                  passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                  });\\r\\n                  config.currentTs= startTs = (new Date()).getTime()\\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n\\r\\n\\r\\n    /*================================================================= END OF GET_Rule_Action API=============================================== */\\r\\n\\r\\n\\r\\n    /*================================================================= START OF POST_Rule_Action API=============================================== */\\r\\n\\r\\nargsObj.payload.tc3_RuleEngine.post_Rule_Action_Create.name= `RuleAction${random_number}` \\r\\n\\r\\n  cy.request({\\r\\n    method:  \\\"POST\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/rules_engine/rule-actions\\\",\\r\\n    headers: {\\r\\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: argsObj.payload.tc3_RuleEngine.post_Rule_Action_Create ? argsObj.payload.tc3_RuleEngine.post_Rule_Action_Create :  {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    cy.wrap(resp.body.id).as('Rule_Action_id').then(()=> {\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Create_Rule_Action\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"201\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                  name: 'Comparing ID captured',\\r\\n                  json: {\\\"ID is captured from response\\\":resp.body.id,\\r\\n                      \\\"Value captured from output parameter\\\":argsObj.Count\\r\\n                  },\\r\\n                  passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                  });\\r\\n                  config.currentTs= startTs = (new Date()).getTime() \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n})\\r\\n    /*================================================================= END OF POST_Rule_Action API=============================================== */\\r\\n\\r\\n    /*================================================================= START OF GET_Rule_Action API=============================================== */\\r\\n\\r\\ncy.get('@Rule_Action_id').then((Rule_Action_id)=>{\\r\\n\\r\\n  cy.request({\\r\\n    method:  \\\"GET\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/rules_engine/rule-actions/\\\" + Rule_Action_id,\\r\\n    headers: {\\r\\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Rule_Action_Details\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                  name: 'Comparing Id captured',\\r\\n                  json: {\\\"ID value is captured from response\\\":resp.body.id,\\r\\n                      \\\"Value captured from output parameter\\\":argsObj.Count\\r\\n                  },\\r\\n                  passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                  });\\r\\n                  config.currentTs= startTs = (new Date()).getTime()  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n})\\r\\n    /*================================================================= END OF GET_Rule_Action API=============================================== */\\r\\n\\r\\n    /*================================================================= START OF PUT_Rule_Action API=============================================== */\\r\\n\\r\\n\\r\\nargsObj.payload.tc3_RuleEngine.put_Rule_Action_Update.name = `PUTRuleAction${random_number}`\\r\\ncy.get('@Rule_Action_id').then((Rule_Action_id)=>{\\r\\n  cy.request({\\r\\n    method:  \\\"PUT\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/rules_engine/rule-actions/\\\" + Rule_Action_id,\\r\\n    headers: {\\r\\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: argsObj.payload.tc3_RuleEngine.put_Rule_Action_Update ? argsObj.payload.tc3_RuleEngine.put_Rule_Action_Update : {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Update_Rule_Action\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                  name: 'Comparing priority captured',\\r\\n                  json: {\\\"priority is captured from response\\\":resp.body.priority,\\r\\n                      \\\"priority captured from output parameter\\\":argsObj.priority\\r\\n                  },\\r\\n                  passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                  });\\r\\n                  config.currentTs= startTs = (new Date()).getTime()  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n})\\r\\n    /*================================================================= END OF PUT_Rule_Action API=============================================== */\\r\\n\\r\\n});\",\"endpointName\":\"General_POST_api_v1_iam_token\",\"saveGeneratedResponse\":false,\"valueOfResponseJQL\":\"\",\"fileType\":\"Test-Case\",\"inputData\":[{\"name\":\"payload\",\"type\":\"Fixture\",\"fixture_prop_name\":\"payload\",\"argsObjFlag\":true}],\"outputData\":[{\"name\":\"\",\"value_from_response\":\"\"}],\"isChecked\":true,\"sshData\":[]}]"
        },
        {
            "filePath": "e2e/api/Matrix1/CXPM1/Rule_engine1",
            "fileName": "Rule_engine1-config.json",
            "fileType": "Fixture",
            "fileData": "{\"payload\":{\"fieldType\":\"object\",\"fieldValue\":{\"baseUrl\":\"https://10.105.238.236\",\"username\":\"tenant-admin@cisco.com\",\"password\":\"M@trix123\",\"tenant\":\"Cisco\",\"tc1_reporting\":{\"post_report_template\":{\"name\":\"10rkr2\",\"report_type\":1,\"report_content\":1,\"template_description\":\"Testgging nedw \",\"source\":\"Select * from report_template\",\"process\":\"return x\",\"status\":\"TRUE\",\"number_of_columns\":5},\"post_dry_run\":{\"process_code\":\"return x\",\"source\":\"select * from report_template\",\"start_date\":\"2023-09-03 11:51:00\",\"end_date\":\"2023-10-31+11:51:00\"},\"put_report_template\":{\"id\":9,\"name\":\"103\",\"template_description\":\"Testjingttggg new\",\"source\":\"Select * from report_template\",\"data_modal_source\":\"\",\"process\":\"return x\",\"report_content\":1,\"report_type\":\"1\"},\"put_report_template_datamodel\":{\"name\":\"104\",\"report_type\":\"1\",\"template_description\":\"Testingnrrsdsd dfdfdf\",\"report_content\":\"2\",\"source\":\"\",\"data_modal_source\":[\"report_template id\",\"report_template name\",\"report_template source\",\"report_template data_modal_source\"],\"process\":\"return x\"},\"post_scheduler_ondemand\":{\"scheduler_name\":\"105\",\"template\":\"3\",\"report_recipients\":\"ujjwel.dutt@cisco.com,sujeetk4@cisco.com\",\"report_description\":\"sdfsjhdf\",\"report_format\":\"xlsx\",\"start_date\":\"2023-11-02 11:40:00\",\"end_date\":\"2023-11-30 11:40:00\",\"scheduler_type\":\"On-Demand\",\"scheduled_time\":\"00:00\",\"frequency\":\"\",\"status_enabled\":false},\"post_schedular_schedule\":{\"scheduler_name\":\"10eee6\",\"template\":\"3\",\"report_description\":\"Test repggfort scheduler\",\"report_recipients\":\"ujjwel.dutt@cisco.com,sujeetk4@cisco.com\",\"report_format\":\"xlsx\",\"start_date\":\"2023-08-01 11:37:00\",\"end_date\":\"2023-11-30 11:37:00\",\"frequency\":\"Hourly\",\"scheduled_time\":\"17:08\",\"status_enabled\":true,\"scheduler_type\":\"Schedule\"},\"patch_report_scheduler\":{\"scheduler_name\":\"107\",\"template_name\":\"Test_template1\",\"report_description\":\"Test report scheduler TWO\",\"report_format\":\"xlsx\",\"start_date\":\"2023-08-01 11:37:00\",\"end_date\":\"2023-11-30 11:37:00\",\"report_recipients\":\"sujeetk4@cisco.com\",\"frequency\":\"Weekly\",\"scheduled_time\":\"22:13\",\"status_enabled\":true},\"post_catalog_history\":{\"status\":true,\"frequency\":\"MONTHLY\",\"start_time\":\"2023-02-01T00:30\",\"end_time\":\"2023-05-31T00:31\",\"scheduler_type\":\"Schedule\",\"created_by\":1,\"created_on\":\"2023-04-05 18:00:30.791104+00\",\"report_scheduler\":31,\"execute_status\":\"Scheduled\"}},\"tc2_forecasting\":{\"post_forcasting_model\":{\"model_id\":[118],\"period\":1},\"Post_trainmodel\":{\"start_date\":\"2023-09-24 00:00\",\"end_date\":\"2023-09-30 12:00\",\"step\":\"T,min\",\"allow_retrain\":true,\"seasonality\":false,\"samples\":200,\"node_id\":43,\"kpi_id\":17,\"models\":[\"Prophet\"],\"indexes\":[\"16\"]},\"get_trainmodel\":{\"node_id\":43,\"kpi_id\":17,\"models\":\"Prophet\",\"indexes\":\"16\"},\"get_autostep_size\":{\"start_date\":\"2023-09-24 00:00\",\"end_date\":\"2023-09-30 12:00\",\"node_id\":43,\"kpi_id\":17,\"index_id\":[16,14,18]},\"get_actual_data\":{\"start_date\":\"2023-09-24 00:00\",\"end_date\":\"2023-09-30 12:00\",\"node_id\":43,\"kpi_id\":17,\"index_id\":16}},\"tc3_RuleEngine\":{\"POST_Trigger_window_Create\":{\"name\":\"trigger_window_8\",\"number_of_records\":10,\"number_of_seconds\":20,\"active\":false,\"source_path_detail\":{\"source_path\":[\"events\"]},\"enrichment_attributes\":[{\"source_table\":\"node_node\",\"source_column\":\"host_name\",\"destination_table\":\"events\",\"destination_column\":\"subdomain\"}]},\"Put_Trigger_Window_Update\":{\"id\":10,\"enrichment_attributes\":[{\"id\":5,\"source_table\":\"node_node\",\"source_column\":\"host_name\",\"raw_column_name\":null,\"destination_table\":\"events\"}],\"name\":\"trigger_window_8\",\"source_path_detail\":{\"source_path\":[\"events\"]},\"number_of_records\":10,\"number_of_seconds\":200,\"active\":false},\"Post_Rule_Trigger_Create\":{\"name\":\"Events rule 3\",\"priority\":\"10\",\"active\":true,\"rule_trigger_condition\":[{\"topic\":\"events\",\"column_name\":\"name\",\"operator\":\"c\",\"value\":\"link down\",\"relationship_type\":\"AND\"}]},\"Put_Rule_Trigger_Update\":{\"name\":\"Events rule 15\",\"priority\":\"5\",\"active\":false,\"rule_trigger_condition\":[{\"topic\":\"events\",\"column_name\":\"name\",\"operator\":\"c\",\"value\":\"link\",\"relationship_type\":\"AND\"}]},\"post_Rule_Action_Create\":{\"name\":\"Rule Action Test\",\"description\":\"Event data grouped based on name\",\"priority\":\"1\",\"incident_severity\":\"High\",\"active\":false,\"rule_trigger\":1,\"rule_conditions\":[{\"topic\":\"events\",\"condition\":\"group_by\",\"column_name\":\"name\"}]},\"put_Rule_Action_Update\":{\"rule_trigger\":1,\"rule_conditions\":[{\"topic\":\"events\",\"condition\":\"group_by\",\"column_name\":\"name\",\"operator\":null,\"value\":null,\"source_table\":null,\"source_column\":null,\"relationship_type\":null}],\"name\":\"Rule Action Updated3\",\"description\":\"Event data grouped based on name\",\"priority\":\"1\",\"incident_severity\":\"High\",\"active\":false}},\"tc4_ITSM\":{\"Post_North_Bound_post\":{\"itsm_type\":\"SN\",\"itsm_instance_name\":\"Instance1\",\"itsm_username\":\"coxdev\",\"itsm_password\":\"Cisco123!!!\",\"itsm_api_path_url\":\"/api/now/table/incident\",\"itsm_hostname\":\"https://ven04358.service-now.com\"},\"Put_North_Bound_put\":{\"itsm_type\":\"AP\",\"itsm_instance_name\":\"Instance1\",\"itsm_username\":\"coxdev\",\"itsm_password\":\"Cisco123!!!\",\"itsm_api_path_url\":\"/api/now/table/incident\",\"itsm_hostname\":\"https://ven04358.service-now.com\"},\"Post_ITSM_rules_Post\":{\"instance_name\":\"6\",\"topic\":[\"7\",\"5\"],\"device_types\":[\"1\"],\"devices\":[\"17\",\"16\"],\"severity\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"],\"inc_severity\":[\"1\",\"2\"]},\"Put_ITSM_rules_Put\":{\"instance_name\":\"2\",\"topic\":[\"7\",\"5\"],\"device_types\":[\"1\"],\"devices\":[\"17\",\"16\"],\"severity\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"],\"inc_severity\":[\"1\",\"2\"]},\"Post_Incident_Notification_Post\":{\"name\":\"Template12\",\"description\":\"descrption\",\"type\":\"EM\",\"enabled\":true,\"instance_name\":\"3\",\"notification_severity\":[\"1\"],\"device_types\":[\"5\"],\"devices\":[\"223\"]},\"Put_Incident_Notification_Put\":{\"name\":\"Template13\",\"description\":\"descrption\",\"type\":\"EM\",\"enabled\":true,\"instance_name\":\"3\",\"notification_severity\":[\"1\"],\"device_types\":[\"5\"],\"devices\":[\"223\"]},\"Post_Send_Incident_Notification\":{\"subject\":\"Notification Received: Snow Ticket Incident Created\",\"action\":\"update\",\"ticket\":{\"id\":2,\"created_on\":\"2023-07-20T07:42:49.681203Z\",\"modified_on\":\"2023-07-20T07:42:49.694731Z\",\"ticket\":\"INC0451030\",\"incident_name\":\"link down\",\"open_timestamp\":\"2023-07-10T18:15:43Z\",\"close_timestamp\":null,\"short_description\":\"add description\",\"severity\":1,\"impact\":1,\"priority\":1,\"urgency\":1,\"description\":\"sadjsadkljlkjlksad\",\"number_of_issues\":2,\"state\":2,\"sys_id\":\"431af118db32211005b083aa13961977\",\"category\":\"inquiry\",\"cmdb_ci\":\"L3-Rack6.fra-lab.net\",\"instance_id\":\"847285ad-c109-40e5-85ce-bdc0779d5636\",\"device_detail\":[\"L3-Rack6.fra-lab.net\"],\"number_of_devices\":2,\"owner\":\"asdasada\",\"snow_url\":\"https://ven04358.service-now.com\",\"acknowledged_by_user\":null,\"acknowledge_timestamp\":null,\"close_by\":null,\"last_updated_time_stamp\":null,\"cleare_by\":\"\",\"cleared_time_stamp\":null,\"incident_logs\":null,\"incident_issue_category\":null,\"incident_issue_type\":null,\"issue_details\":null,\"snow_config_id\":null,\"unique_key\":null,\"group_by_column\":null,\"created_by\":\"admin@tenant1.com\",\"modified_by\":\"admin@tenant1.com\"}},\"Put_Incident_update\":{\"ticket\":\"INC0766861\",\"incident_name\":\"link down\",\"severity\":3,\"impact\":3,\"priority\":3,\"urgency\":1,\"state\":2},\"Post_Ticket_Post\":{\"ticket\":\"INC0088\",\"incident_name\":\"Test Inc\",\"open_timestamp\":\"2023-10-03 14:27:44.387934+00\",\"close_timestamp\":null,\"severity\":1,\"impact\":1,\"priority\":1,\"urgency\":1,\"description\":\"testing\",\"number_of_issues\":1,\"state\":1,\"sys_id\":\"ecc28693dba5b110d852a049139619a1\",\"category\":\"IQ\",\"cmdb_ci\":\"81fda06e-8a00-48cc-aa59-807a5ae10cbb\",\"instance_id\":\"81fda06e-8a00-48cc-aa59-807a5ae10cbb\",\"device_detail\":[\"COX-SVS-6454-2\"],\"number_of_devices\":1,\"owner\":\"\",\"snow_url\":\"https://ven04358.service-now.com\",\"acknowledged_by_user\":null,\"acknowledge_timestamp\":null,\"close_by\":\"\",\"last_updated_time_stamp\":null,\"cleared_by\":\"\",\"cleared_time_stamp\":null,\"incident_logs\":null,\"incident_issue_category\":\"\",\"incident_issue_type\":null,\"issue_details\":[{\"AlarmId\":\"60a380506176752d31d6201a\",\"AlarmName\":\"UCS-F0502\"}],\"snow_config_id\":null,\"unique_key\":null,\"group_by_column\":null,\"created_by_id\":null,\"modified_by_id\":null},\"Put_Ticket_Put\":{\"id\":5,\"created_on\":\"2023-10-03 14:27:44.396528+00\",\"modified_on\":\"2023-10-03 14:27:44.39657+00\",\"ticket\":\"INC0088\",\"incident_name\":\"Test Inc for update\",\"open_timestamp\":\"2023-10-03 14:27:44.387934+00\",\"close_timestamp\":null,\"severity\":1,\"impact\":1,\"priority\":1,\"urgency\":1,\"description\":\"testing\",\"number_of_issues\":1,\"state\":1,\"sys_id\":\"ecc28693dba5b110d852a049139619a1\",\"category\":\"IQ\",\"cmdb_ci\":\"81fda06e-8a00-48cc-aa59-807a5ae10cbb\",\"instance_id\":\"81fda06e-8a00-48cc-aa59-807a5ae10cbb\",\"device_detail\":[\"COX-SVS-6454-2\"],\"number_of_devices\":1,\"owner\":\"\",\"snow_url\":\"https://ven04358.service-now.com\",\"acknowledged_by_user\":null,\"acknowledge_timestamp\":null,\"close_by\":\"\",\"last_updated_time_stamp\":null,\"cleared_by\":\"\",\"cleared_time_stamp\":null,\"incident_logs\":null,\"incident_issue_category\":\"\",\"incident_issue_type\":null,\"issue_details\":[{\"AlarmId\":\"60a380506176752d31d6201a\",\"AlarmName\":\"UCS-F0502\"}],\"snow_config_id\":null,\"unique_key\":null,\"group_by_column\":null,\"created_by_id\":null,\"modified_by_id\":null}},\"tc5_predictive\":{\"post_KPI_on_node\":{\"nodes\":[43]},\"post_indexs_on_KPI\":{\"nodes\":[43],\"kpis\":[1]},\"post_detections\":{\"name\":\"Forexxcakkkkjkst\",\"description\":\"Forecast 1\",\"algorithm_type\":\"Prophet\",\"node_include\":[43],\"kpi_include\":[17],\"index_include\":[14],\"range_unit\":null,\"range_duration\":null,\"is_cron_enabled\":true,\"is_enabled\":true,\"training_start_time\":\"2023-09-24 22:30:00\",\"training_end_time\":\"2023-09-29 22:30:00\",\"cron_start_time\":\"2023-08-03T21:52:00.00+05:30\",\"cron_end_time\":\"2023-09-01T10:30:00\",\"cron_frequency\":\"Weekly\",\"critical_days\":\"11\",\"warning_days\":\"12\",\"threshold_value\":\"12\",\"forecast_period\":\"12\",\"is_percentage\":\"True\",\"crontab\":{\"minute\":\"0\",\"hour\":\"0\",\"day_of_week\":\"*\",\"day_of_month\":\"*\",\"month_of_year\":\"*\",\"timezone\":\"UTC\"}},\"put_detections\":{\"is_enabled\":true,\"is_cron_enabled\":false,\"name\":\"updated detection\",\"description\":\"description\",\"algorithm_type\":\"Prophet\",\"range_unit\":null,\"range_duration\":1,\"training_start_time\":\"2023-01-01 10:30:00\",\"training_end_time\":\"2023-02-01 10:30:00\",\"crontab\":{\"minute\":\"*\",\"hour\":\"*\",\"day_of_week\":\"*\",\"day_of_month\":\"*\",\"month_of_year\":\"*\",\"timezone\":\"UTC\"},\"cron_start_time\":\"2023-08-01T10:30:00\",\"cron_end_time\":\"2023-09-01T10:30:00\",\"cron_frequency\":\"Weekly\",\"critical_days\":10,\"warning_days\":15,\"threshold_value\":50,\"forecast_period\":10,\"is_percentage\":false,\"retention_policy\":10,\"node_include\":[1],\"kpi_include\":[2],\"index_include\":[1]},\"post_audit\":{\"schedule\":\"Daily\",\"status_of_detection\":\"FAILED\",\"success_percentage\":\"50.00\",\"detection_id\":1},\"post_demand_onrun\":{\"detection_id\":1}}},\"files\":[]}}"
        }
    ]
}