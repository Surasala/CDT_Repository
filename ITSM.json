{
    "applicationName": "matrix",
    "testType": "api",
    "customerName": "cxpm",
    "useCaseName": "ITSM",
    "testSuiteFiles": [
        {
            "filePath": "e2e/api/matrix/cxpm/ITSM",
            "fileType": "Test-Suite",
            "fileName": "matrix-cxpm-ITSM.cy.js",
            "fileData": "import { Utils } from '../../support/utils';\nimport '../../support/api-beforeAfterBlock';\nimport \"./General_POST_api_v1_iam_token\";\n\n\n\nlet config;\nlet usecasename = 'ITSM'\nlet specfilename = 'matrix-cxpm-ITSM'\nlet configPath, execLogObj;\nlet apiDiffResponse = {}\n\ndescribe('Testing matrix for cxpm-ITSM', () => {\n  before(() => {\n    configPath = `cypress/e2e/${Cypress.env('integrationFolder')}/${usecasename}-config.json`;\n    cy.before(config, configPath, execLogObj, usecasename, apiDiffResponse).then(value => {\n      ({config, execLogObj, configPath, apiDiffResponse} = value)\n    });\n  });\n  after(() => {\n    cy.after(config, execLogObj, configPath, apiDiffResponse).then(value => ({config, execLogObj} = value));\n  });\n  it('Testing General_POST_api_v1_iam_token', () => {\n    cy.on('fail',(err,runnable)=>{\n        let error= JSON.stringify(err)\n        let index = execLogObj.testCases.length-1\n        if(index>=0){\n            execLogObj.testCases[execLogObj.testCases.length-1].childTestCases.push({\n              name:'***************ERROR !! *****************         '+ error,\n              passFailFlag: 'Fail',\n              duration:Utils.calcTimeDuration(config.currentTs, (new Date()).getTime())\n          })\n          execLogObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\n          execLogObj.testCases[index].passFailFlag =  'Fail'\n        }          \n        throw err;\n    }).then(()=>{\n        cy.task('setLogObject',{val:execLogObj,num:3})\n      })           \n    var argsObj = {\n        \tpayload:config.payload,\n    };\n    cy.General_POST_api_v1_iam_token(config, '1000', argsObj, execLogObj).then((response) => {              \n          \n    }); \n});\n\n});\n"
        },
        {
            "fileType": "Test-Case",
            "filePath": "e2e/api/matrix/cxpm/ITSM",
            "fileName": "General_POST_api_v1_iam_token.js",
            "fileData": "import { Utils } from '../../support/utils';\r\nimport '@shelex/cypress-allure-plugin';\r\n\r\nCypress.Commands.add( \"General_POST_api_v1_iam_token\", (config, ticketNbr, argsObj, logObj ) => {\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs = startTs;\r\n    let accessToken = \"\";\r\n    let refreshToken = \"\";\r\n    let tenant =argsObj.payload.tenant\r\n    let logindetails={\r\n      \"email\":argsObj.payload.username,\r\n      \"password\":argsObj.payload.password\r\n\r\n    };\r\n    let random_number = Math.floor(Math.random() * 1000000000000) + 1;\r\n\r\n /*================================================================= START OF TOKEN API=============================================== */\r\n   \r\n  cy.request({\r\n    method:  \"POST\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/iam/token\",\r\n    headers: {\r\n      'Authorization': 'basic ' + btoa(argsObj.payload.username + ':' + argsObj.payload.password),\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: logindetails ? logindetails : {}\r\n  }).then(resp => {\r\n    logObj.testCases.push({\r\n      name:  \"Get Token\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    accessToken = resp.body.access;\r\n    refreshToken = resp.body.refresh;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Ensuring access and refresh token values ',\r\n                json: {\"accessToken value- \":resp.body.access, \"refreshToken value-\":resp.body.refresh},\r\n                passFailFlag: resp.body.access !== null && resp.body.refresh !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n\r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n    /*================================================================= END OF TOKEN API=============================================== */\r\n\r\n    /*================================================================= START OF POST_NorthBound Post  API================================ */\r\n\r\n\r\nargsObj.payload.tc4_ITSM.Post_North_Bound_post.itsm_instance_name= `NorthBound${random_number}`  \r\nargsObj.payload.tc4_ITSM.Post_North_Bound_post.itsm_api_path_url= `/api/now/table/incident/12${random_number}` \r\n  cy.request({\r\n    method:  \"POST\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/itsm/northbound\",\r\n    headers: {\r\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: argsObj.payload.tc4_ITSM.Post_North_Bound_post ? argsObj.payload.tc4_ITSM.Post_North_Bound_post : {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    cy.wrap(resp.body.id).as('Put_North_Bound_put_id').then(()=> {\r\n    \r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Create NorthBound\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"201\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime() \r\n        logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing Name captured',\r\n                json: {\"Name captured from response\":resp.body.name,\r\n                    \"Value captured from output parameter\":argsObj.Count\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime() \r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n\r\n})\r\n})\r\n\r\n    /*================================================================= END OF POST_NorthBound Post API=============================================== */\r\n\r\n    /*================================================================= START OF GET_NorthBound API=============================================== */\r\n    cy.get('@Put_North_Bound_put_id').then((Put_North_Bound_put_id)=>{\r\n        cy.request({\r\n            method:  \"GET\",\r\n            url: argsObj.payload.baseUrl + \"/api/v1/itsm/northbound/\" + Put_North_Bound_put_id,\r\n            headers: {\r\n              'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json',\r\n            },\r\n            failOnStatusCode : false,\r\n            body: {}\r\n          }).then(resp => {\r\n            console.log('\\n\\n resp ==>'); console.log(resp);\r\n            let startTs = (new Date()).getTime()\r\n            config.testCaseStartTs = config.currentTs= startTs;\r\n            logObj.testCases.push({\r\n              name:  \"NorthBound Details\",\r\n              passFailFlag: 'Pass',\r\n              duration: (new Date()).getTime(),\r\n              tag: ticketNbr,\r\n              childTestCases: [\r\n                {\r\n                  name: 'Is resp.status = 200',\r\n                  passFailFlag: 'Fail',\r\n                  duration: (new Date()).getTime()\r\n                },\r\n                {\r\n                  name: 'Is resp.isOkStatusCode = true',\r\n                  passFailFlag: 'Fail'\r\n                }\r\n              ]\r\n            })\r\n            \r\n            let apiResponse,index= logObj.testCases.length-1;\r\n            apiResponse = resp;\r\n            let responseStatusCode =  \"200\";\r\n            let responseType = \"object\";\r\n        \r\n            logObj.testCases[index].childTestCases[0] = {\r\n              name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n              json: resp.body,\r\n              passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n              duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n            };\r\n            config.currentTs= startTs = (new Date()).getTime()\r\n        \r\n            logObj.testCases[index].childTestCases[1] = {\r\n              name: `\"isOkStatusCode\" of Response is true`,\r\n              passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n              duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            };\r\n            config.currentTs= startTs = (new Date()).getTime()\r\n        \r\n            if(resp.status >= 200 && resp.status <= 299) {        \r\n               logObj.testCases[index].childTestCases.push({\r\n                        name: 'Is response body of type' + responseType,\r\n                        passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                        duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                        });\r\n                        config.currentTs= startTs = (new Date()).getTime()\r\n               logObj.testCases[index].childTestCases.push({\r\n                        name: 'Type of response body should be \"object\" and respBody should not null',\r\n                        passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                        duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                        });\r\n                        config.currentTs= startTs = (new Date()).getTime()  \r\n                logObj.testCases[index].childTestCases.push({\r\n                        name: 'Comparing count captured',\r\n                        json: {\"Id Value captured from response\":resp.body.id,\r\n                            \"Value captured from output parameter\":argsObj.Count\r\n                        },\r\n                        passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                        duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                        });\r\n                        config.currentTs= startTs = (new Date()).getTime()         \r\n                \r\n          \r\n              logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n              logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n              return apiResponse;\r\n            }\r\n    })\r\n})          \r\n\r\n    /*================================================================= END OF GET_NorthBound API=============================================== */\r\n    \r\n    /*================================================================= START OF PUT_NorthBound API=============================================== */\r\n\r\n\r\n  argsObj.payload.tc4_ITSM.Put_North_Bound_put.itsm_instance_name = `UpdateNorthBound${random_number}`\r\n  cy.get('@Put_North_Bound_put_id').then((Put_North_Bound_put_id)=>{\r\n  \r\n  cy.request({\r\n    method:  \"PUT\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/itsm/northbound/\" + Put_North_Bound_put_id,\r\n    headers: {\r\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: argsObj.payload.tc4_ITSM.Put_North_Bound_put ? argsObj.payload.tc4_ITSM.Put_North_Bound_put : {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    cy.wrap(resp.body.id).as('itsm_instance_id').then(()=> {\r\n  \r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Update NorthBound\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing active status captured',\r\n                json: {\"Active status captured from response\":resp.body.active,\r\n                    \"active status captured from output parameter\":argsObj.active\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime() \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n})\r\n  })\r\n      /*================================================================= END OF PUT_NorthBound API=============================================== */\r\n     /*================================================================= START OF GET NorthBound List API==================================== */\r\n\r\n\r\n \r\n  cy.request({\r\n    method:  \"GET\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/itsm/northbound/views\",\r\n    headers: {\r\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"GET_NorthBound_List\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n        logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing count captured',\r\n                json: {\"Value captured from response\":resp.body.count,\r\n                    \"Value captured from output parameter\":argsObj.Count\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n})\r\n\r\n\r\n    /*================================================================= END OF GET NorthBound List API==================================== */\r\n\r\n    /*================================================================= START OF POST_ITSM Rules API=============================================== */\r\ncy.get('@itsm_instance_id').then((itsm_instance_id)=>{\r\n\r\nargsObj.payload.tc4_ITSM.Post_ITSM_rules_Post.instance_name= itsm_instance_id\r\n\r\n\r\ncy.request({\r\n  method:  \"POST\",\r\n  url: argsObj.payload.baseUrl + \"/api/v1/itsm/itsm_rule\",\r\n  headers: {\r\n    'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n  },\r\n  failOnStatusCode : false,\r\n  body: argsObj.payload.tc4_ITSM.Post_ITSM_rules_Post ? argsObj.payload.tc4_ITSM.Post_ITSM_rules_Post :  {}\r\n}).then(resp => {\r\n  console.log('\\n\\n resp ==>'); console.log(resp);\r\n  cy.wrap(resp.body.id).as('ITSM_rules_id').then(() => {\r\n  let startTs = (new Date()).getTime()\r\n  config.testCaseStartTs = config.currentTs= startTs;\r\n  logObj.testCases.push({\r\n    name:  \"Create ITSM Rules\",\r\n    passFailFlag: 'Pass',\r\n    duration: (new Date()).getTime(),\r\n    tag: ticketNbr,\r\n    childTestCases: [\r\n      {\r\n        name: 'Is resp.status = 200',\r\n        passFailFlag: 'Fail',\r\n        duration: (new Date()).getTime()\r\n      },\r\n      {\r\n        name: 'Is resp.isOkStatusCode = true',\r\n        passFailFlag: 'Fail'\r\n      }\r\n    ]\r\n  })\r\n  \r\n  let apiResponse,index= logObj.testCases.length-1;\r\n  apiResponse = resp;\r\n  let responseStatusCode =  \"201\";\r\n  let responseType = \"object\";\r\n\r\n  logObj.testCases[index].childTestCases[0] = {\r\n    name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n    json: resp.body,\r\n    passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n    duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n  };\r\n  config.currentTs= startTs = (new Date()).getTime()\r\n\r\n  logObj.testCases[index].childTestCases[1] = {\r\n    name: `\"isOkStatusCode\" of Response is true`,\r\n    passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n  };\r\n  config.currentTs= startTs = (new Date()).getTime()\r\n\r\n  if(resp.status >= 200 && resp.status <= 299) {        \r\n     logObj.testCases[index].childTestCases.push({\r\n              name: 'Is response body of type' + responseType,\r\n              passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n              duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n              });\r\n              config.currentTs= startTs = (new Date()).getTime()\r\n     logObj.testCases[index].childTestCases.push({\r\n              name: 'Type of response body should be \"object\" and respBody should not null',\r\n              passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n              duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n              });\r\n              config.currentTs= startTs = (new Date()).getTime()  \r\n\r\n    logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n    logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n    return apiResponse;\r\n  }\r\n})\r\n})\r\n})\r\n       /*================================================================= END OF POST_ITSM Rules API=============================================== */\r\n\r\n\r\n      /*================================================================= START OF GET_ITSM Rules API=============================================== */\r\ncy.get('@ITSM_rules_id').then((ITSM_rules_id)=>{\r\n        \r\n\r\n  cy.request({\r\n    method:  \"GET\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/itsm/itsm_rule/\" +ITSM_rules_id,\r\n    headers: {\r\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"ITSM Rules Details\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing Name captured',\r\n                json: {\"Name captured from response\":resp.body.name,\r\n                    \"name captured from output parameter\":argsObj.name\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n})\r\n\r\n\r\n      /*================================================================= END OF GET_ITSM Rules API=============================================== */\r\n\r\n     /*================================================================= START OF PUT_ITSM Rules API=============================================== */\r\ncy.get('@itsm_instance_id').then((itsm_instance_id)=>{\r\n\r\nargsObj.payload.tc4_ITSM.Put_ITSM_rules_Put.instance_name= itsm_instance_id\r\ncy.get('@ITSM_rules_id').then((ITSM_rules_id)=>{\r\n    \r\n \r\n  cy.request({\r\n    method:  \"PUT\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/itsm/itsm_rule/\" + ITSM_rules_id,\r\n    headers: {\r\n    'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: argsObj.payload.tc4_ITSM.Put_ITSM_rules_Put ? argsObj.payload.tc4_ITSM.Put_ITSM_rules_Put : {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Update ITSM Rules\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing Active Status captured',\r\n                json: {\"Active Status  captured from response\":resp.body.Active,\r\n                    \"Value captured from output parameter\":argsObj.Count\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n\r\n})\r\n     })\r\n     /*================================================================= END OF PUT_ITSM Rules API=============================================== */\r\n \r\n     /*================================================================= START OF GET_ITSM Rules API=============================================== */\r\n  \r\n  cy.request({\r\n    method:  \"GET\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/itsm/itsm_rule\",\r\n    headers: {\r\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"List ITSM Rules\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n        logObj.testCases[index].childTestCases.push({\r\n                name: 'Comparing count captured',\r\n                json: {\"Count value captured from response\":resp.body.count,\r\n                    \"Value captured from output parameter\":argsObj.count\r\n                },\r\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n})\r\n\r\n      /*================================================================= END OF GET_ITSM Rules API=============================================== */\r\n\r\n     /*================================================================= START OF GET_ITSM Rules/device type API=============================================== */\r\n  \r\n    cy.request({\r\n      method:  \"GET\",\r\n      url: argsObj.payload.baseUrl + \"/api/v1/itsm/itsm_rule/get_devices?device_type=1\",\r\n      headers: {\r\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n      },\r\n      failOnStatusCode : false,\r\n      body: {}\r\n    }).then(resp => {\r\n      console.log('\\n\\n resp ==>'); console.log(resp);\r\n      let startTs = (new Date()).getTime()\r\n      config.testCaseStartTs = config.currentTs= startTs;\r\n      logObj.testCases.push({\r\n        name:  \"ITSM Rules Details\",\r\n        passFailFlag: 'Pass',\r\n        duration: (new Date()).getTime(),\r\n        tag: ticketNbr,\r\n        childTestCases: [\r\n          {\r\n            name: 'Is resp.status = 200',\r\n            passFailFlag: 'Fail',\r\n            duration: (new Date()).getTime()\r\n          },\r\n          {\r\n            name: 'Is resp.isOkStatusCode = true',\r\n            passFailFlag: 'Fail'\r\n          }\r\n        ]\r\n      })\r\n      \r\n      let apiResponse,index= logObj.testCases.length-1;\r\n      apiResponse = resp;\r\n      let responseStatusCode =  \"200\";\r\n      let responseType = \"object\";\r\n  \r\n      logObj.testCases[index].childTestCases[0] = {\r\n        name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n        json: resp.body,\r\n        passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n        duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n      };\r\n      config.currentTs= startTs = (new Date()).getTime()\r\n  \r\n      logObj.testCases[index].childTestCases[1] = {\r\n        name: `\"isOkStatusCode\" of Response is true`,\r\n        passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n        duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n      };\r\n      config.currentTs= startTs = (new Date()).getTime()\r\n  \r\n      if(resp.status >= 200 && resp.status <= 299) {        \r\n         logObj.testCases[index].childTestCases.push({\r\n                  name: 'Is response body of type' + responseType,\r\n                  passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                  });\r\n                  config.currentTs= startTs = (new Date()).getTime()\r\n         logObj.testCases[index].childTestCases.push({\r\n                  name: 'Type of response body should be \"object\" and respBody should not null',\r\n                  passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                  });\r\n                  config.currentTs= startTs = (new Date()).getTime()  \r\n         logObj.testCases[index].childTestCases.push({\r\n                  name: 'Comparing Name captured',\r\n                  json: {\"Name captured from response\":resp.body.name,\r\n                      \"name captured from output parameter\":argsObj.name\r\n                  },\r\n                  passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\r\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                  });\r\n                  config.currentTs= startTs = (new Date()).getTime()\r\n        logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n        logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n        return apiResponse;\r\n      }\r\n    })\r\n     /*================================================================= END OF GET_ITSM Rules/device type API=============================================== */\r\n\r\n \r\n\r\n    /*================================================================= START OF POST_Incident Notification API=============================================== */\r\n\r\nargsObj.payload.tc4_ITSM.Post_Incident_Notification_Post.name= `IncidentNotification ${random_number}` \r\n\r\n  cy.request({\r\n    method:  \"POST\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/itsm/incidentnotification\",\r\n    headers: {\r\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: argsObj.payload.tc4_ITSM.Post_Incident_Notification_Post ? argsObj.payload.tc4_ITSM.Post_Incident_Notification_Post :  {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    cy.wrap(resp.body).as('Incident_Notification').then(() => {\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Create Incident Notification\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"201\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n})\r\n    /*================================================================= END OF POST_Incident Notification API=============================================== */\r\n\r\n    /*================================================================= START OF GET_Incident Notification API=============================================== */\r\n\r\ncy.get('@Incident_Notification').then((Incident_Notification)=>{\r\n\r\n  cy.request({\r\n    method:  \"GET\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/itsm/incidentnotification/\" + Incident_Notification.id,\r\n    headers: {\r\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    cy.wrap(resp.body).as('Get_Incident_Notification_instancename').then(() => {\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Incident Notification Details\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n})\r\n})\r\n    /*================================================================= END OF GET_Incident Notification API=============================================== */\r\n       /*================================================================= START OF GET_Incident Notification API=============================================== */\r\n\r\n \r\n  cy.request({\r\n    method:  \"GET\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/itsm/incidentnotification/views?standalone=yes&page=1&limit=10&search=&ordering=name\",\r\n    headers: {\r\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"List Incident Notification\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n\r\n\r\n    /*================================================================= END OF GET_Incident Notification API=============================================== */\r\n\r\n\r\n    /*================================================================= START OF PUT_Incident Notification API=============================================== */\r\n\r\n\r\nargsObj.payload.tc4_ITSM.Put_Incident_Notification_Put.name = `PUTIncidentNotification ${random_number}`\r\ncy.get('@Incident_Notification').then((Incident_Notification)=>{\r\n  cy.request({\r\n    method:  \"PUT\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/itsm/incidentnotification/\" + Incident_Notification.id,\r\n    headers: {\r\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: argsObj.payload.tc4_ITSM.Put_Incident_Notification_Put ? argsObj.payload.tc4_ITSM.Put_Incident_Notification_Put : {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Update Incident Notification\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n})\r\n    /*================================================================= END OF PUT_Incident Notification API=============================================== */\r\n    \r\n    /*================================================================= START OF GET_Incident Notification Get Instance API=============================================== */\r\n    cy.get('@Incident_Notification').then((Incident_Notification)=>{\r\n\r\n  cy.request({\r\n    method:  \"GET\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/itsm/incidentnotification/get_instance?type=\"+Incident_Notification.type,\r\n    headers: {\r\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \" Get Instance Details\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n    })\r\n    /*================================================================= END OF GET_Incident Notification Get Instance API=============================================== */\r\n\r\n    /*================================================================= START OF GET_Incident Notification Get Instance Tooltip API=============================================== */\r\n   \r\n    cy.get('@Get_Incident_Notification_instancename').then((Get_Incident_Notification_instancename)=>{\r\n    \r\n   cy.request({\r\n     method:  \"GET\",\r\n     url: argsObj.payload.baseUrl + \"/api/v1/itsm/incidentnotification/get_instance_tooltip?itsm_instance_name=\"+Get_Incident_Notification_instancename.instance_name,\r\n     headers: {\r\n           'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n       'Content-Type': 'application/json',\r\n       'Accept': 'application/json',\r\n     },\r\n     failOnStatusCode : false,\r\n     body: {}\r\n   }).then(resp => {\r\n     console.log('\\n\\n resp ==>'); console.log(resp);\r\n \r\n     let startTs = (new Date()).getTime()\r\n     config.testCaseStartTs = config.currentTs= startTs;\r\n     logObj.testCases.push({\r\n       name:  \"Get Instance Tooltip Details\",\r\n       passFailFlag: 'Pass',\r\n       duration: (new Date()).getTime(),\r\n       tag: ticketNbr,\r\n       childTestCases: [\r\n         {\r\n           name: 'Is resp.status = 200',\r\n           passFailFlag: 'Fail',\r\n           duration: (new Date()).getTime()\r\n         },\r\n         {\r\n           name: 'Is resp.isOkStatusCode = true',\r\n           passFailFlag: 'Fail'\r\n         }\r\n       ]\r\n     })\r\n     \r\n     let apiResponse,index= logObj.testCases.length-1;\r\n     apiResponse = resp;\r\n     let responseStatusCode =  \"200\";\r\n     let responseType = \"object\";\r\n \r\n     logObj.testCases[index].childTestCases[0] = {\r\n       name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n       json: resp.body,\r\n       passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n       duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n     };\r\n     config.currentTs= startTs = (new Date()).getTime()\r\n \r\n     logObj.testCases[index].childTestCases[1] = {\r\n       name: `\"isOkStatusCode\" of Response is true`,\r\n       passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n       duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n     };\r\n     config.currentTs= startTs = (new Date()).getTime()\r\n \r\n     if(resp.status >= 200 && resp.status <= 299) {        \r\n        logObj.testCases[index].childTestCases.push({\r\n                 name: 'Is response body of type' + responseType,\r\n                 passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                 duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                 });\r\n                 config.currentTs= startTs = (new Date()).getTime()\r\n        logObj.testCases[index].childTestCases.push({\r\n                 name: 'Type of response body should be \"object\" and respBody should not null',\r\n                 passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                 duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                 });\r\n                 config.currentTs= startTs = (new Date()).getTime()  \r\n   \r\n       logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n       logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n       return apiResponse;\r\n     }\r\n   })\r\n  })\r\n    /*================================================================= END OF GET_Incident Notification Get Instance Tooltip API=============================================== */\r\n\r\n     \r\n    /*================================================================= START OF POST_ITSM Ticket API=============================================== */\r\n\r\n argsObj.payload.tc4_ITSM.Post_Ticket_Post.incident_name= `ITSM Ticket${random_number}` \r\n\r\n cy.request({\r\n   method:  \"POST\",\r\n   url: argsObj.payload.baseUrl + \"/api/v1/itsm/itsm-ticket\",\r\n   headers: {\r\n         'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n     'Content-Type': 'application/json',\r\n     'Accept': 'application/json',\r\n   },\r\n   failOnStatusCode : false,\r\n   body: argsObj.payload.tc4_ITSM.Post_Ticket_Post ? argsObj.payload.tc4_ITSM.Post_Ticket_Post :  {}\r\n }).then(resp => {\r\n   console.log('\\n\\n resp ==>'); console.log(resp);\r\n   cy.wrap(resp.body.id).as('ITSM_Ticket_id').then(()=> {\r\n   let startTs = (new Date()).getTime()\r\n   config.testCaseStartTs = config.currentTs= startTs;\r\n   logObj.testCases.push({\r\n     name:  \"create ITSM Ticket\",\r\n     passFailFlag: 'Pass',\r\n     duration: (new Date()).getTime(),\r\n     tag: ticketNbr,\r\n     childTestCases: [\r\n       {\r\n         name: 'Is resp.status = 200',\r\n         passFailFlag: 'Fail',\r\n         duration: (new Date()).getTime()\r\n       },\r\n       {\r\n         name: 'Is resp.isOkStatusCode = true',\r\n         passFailFlag: 'Fail'\r\n       }\r\n     ]\r\n   })\r\n   \r\n   let apiResponse,index= logObj.testCases.length-1;\r\n   apiResponse = resp;\r\n   let responseStatusCode =  \"201\";\r\n   let responseType = \"object\";\r\n\r\n   logObj.testCases[index].childTestCases[0] = {\r\n     name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n     json: resp.body,\r\n     passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n     duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n   };\r\n   config.currentTs= startTs = (new Date()).getTime()\r\n\r\n   logObj.testCases[index].childTestCases[1] = {\r\n     name: `\"isOkStatusCode\" of Response is true`,\r\n     passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n     duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n   };\r\n   config.currentTs= startTs = (new Date()).getTime()\r\n\r\n   if(resp.status >= 200 && resp.status <= 299) {        \r\n      logObj.testCases[index].childTestCases.push({\r\n               name: 'Is response body of type' + responseType,\r\n               passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n               duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n               });\r\n               config.currentTs= startTs = (new Date()).getTime()\r\n      logObj.testCases[index].childTestCases.push({\r\n               name: 'Type of response body should be \"object\" and respBody should not null',\r\n               passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n               duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n               });\r\n               config.currentTs= startTs = (new Date()).getTime()  \r\n \r\n     logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n     logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n     return apiResponse;\r\n   }\r\n })\r\n})\r\n   /*================================================================= END OF POST_ITSM Ticket API=============================================== */\r\n  \r\n   /*================================================================= START OF PUT_ITSM Ticket  API=============================================== */\r\n\r\n\r\nargsObj.payload.tc4_ITSM.Put_Ticket_Put.incident_name = `ITSMTicket ${random_number}`\r\ncy.get('@ITSM_Ticket_id').then((ITSM_Ticket_id)=>{\r\ncy.request({\r\nmethod:  \"PUT\",\r\nurl: argsObj.payload.baseUrl + \"/api/v1/itsm/itsm-ticket/\" + ITSM_Ticket_id,\r\nheaders: {\r\n     'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n 'Content-Type': 'application/json',\r\n 'Accept': 'application/json',\r\n},\r\nfailOnStatusCode : false,\r\nbody: argsObj.payload.tc4_ITSM.Put_Ticket_Put ? argsObj.payload.tc4_ITSM.Put_Ticket_Put : {}\r\n}).then(resp => {\r\nconsole.log('\\n\\n resp ==>'); console.log(resp);\r\nlet startTs = (new Date()).getTime()\r\nconfig.testCaseStartTs = config.currentTs= startTs;\r\nlogObj.testCases.push({\r\n name:  \"Update ITSM ticket\",\r\n passFailFlag: 'Pass',\r\n duration: (new Date()).getTime(),\r\n tag: ticketNbr,\r\n childTestCases: [\r\n   {\r\n     name: 'Is resp.status = 200',\r\n     passFailFlag: 'Fail',\r\n     duration: (new Date()).getTime()\r\n   },\r\n   {\r\n     name: 'Is resp.isOkStatusCode = true',\r\n     passFailFlag: 'Fail'\r\n   }\r\n ]\r\n})\r\n\r\nlet apiResponse,index= logObj.testCases.length-1;\r\napiResponse = resp;\r\nlet responseStatusCode =  \"200\";\r\nlet responseType = \"object\";\r\n\r\nlogObj.testCases[index].childTestCases[0] = {\r\n name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n json: resp.body,\r\n passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n};\r\nconfig.currentTs= startTs = (new Date()).getTime()\r\n\r\nlogObj.testCases[index].childTestCases[1] = {\r\n name: `\"isOkStatusCode\" of Response is true`,\r\n passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n};\r\nconfig.currentTs= startTs = (new Date()).getTime()\r\n\r\nif(resp.status >= 200 && resp.status <= 299) {        \r\n  logObj.testCases[index].childTestCases.push({\r\n           name: 'Is response body of type' + responseType,\r\n           passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n           duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n           });\r\n           config.currentTs= startTs = (new Date()).getTime()\r\n  logObj.testCases[index].childTestCases.push({\r\n           name: 'Type of response body should be \"object\" and respBody should not null',\r\n           passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n           duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n           });\r\n           config.currentTs= startTs = (new Date()).getTime()  \r\n\r\n logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n return apiResponse;\r\n}\r\n})\r\n})\r\n  /*================================================================= END OF PUT_ITSM Ticket API=============================================== */\r\n\r\n /*================================================================= START OF GET_ITSM Ticket API=============================================== */\r\ncy.request({\r\n  method:  \"GET\",\r\n  url: argsObj.payload.baseUrl + \"/api/v1/itsm/itsm-ticket/views\",\r\n  headers: {\r\n        'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n  },\r\n  failOnStatusCode : false,\r\n  body: {}\r\n}).then(resp => {\r\n  console.log('\\n\\n resp ==>'); console.log(resp);\r\n  let startTs = (new Date()).getTime()\r\n  config.testCaseStartTs = config.currentTs= startTs;\r\n  logObj.testCases.push({\r\n    name:  \"Get ITSM ticket\",\r\n    passFailFlag: 'Pass',\r\n    duration: (new Date()).getTime(),\r\n    tag: ticketNbr,\r\n    childTestCases: [\r\n      {\r\n        name: 'Is resp.status = 200',\r\n        passFailFlag: 'Fail',\r\n        duration: (new Date()).getTime()\r\n      },\r\n      {\r\n        name: 'Is resp.isOkStatusCode = true',\r\n        passFailFlag: 'Fail'\r\n      }\r\n    ]\r\n  })\r\n  \r\n  let apiResponse,index= logObj.testCases.length-1;\r\n  apiResponse = resp;\r\n  let responseStatusCode =  \"200\";\r\n  let responseType = \"object\";\r\n\r\n  logObj.testCases[index].childTestCases[0] = {\r\n    name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n    json: resp.body,\r\n    passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n    duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n  };\r\n  config.currentTs= startTs = (new Date()).getTime()\r\n\r\n  logObj.testCases[index].childTestCases[1] = {\r\n    name: `\"isOkStatusCode\" of Response is true`,\r\n    passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n  };\r\n  config.currentTs= startTs = (new Date()).getTime()\r\n\r\n  if(resp.status >= 200 && resp.status <= 299) {        \r\n     logObj.testCases[index].childTestCases.push({\r\n              name: 'Is response body of type' + responseType,\r\n              passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n              duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n              });\r\n              config.currentTs= startTs = (new Date()).getTime()\r\n     logObj.testCases[index].childTestCases.push({\r\n              name: 'Type of response body should be \"object\" and respBody should not null',\r\n              passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n              duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n              });\r\n              config.currentTs= startTs = (new Date()).getTime()  \r\n\r\n    logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n    logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n    return apiResponse;\r\n  }\r\n})\r\n\r\n          /*================================================================= END OF GET_ITSM Ticket API=============================================== */\r\n   \r\n\r\n    /*================================================================= START OF POST_Send Incident Notification API=============================================== */\r\n\r\nargsObj.payload.tc4_ITSM.Post_Send_Incident_Notification.name= `IncidentNotification ${random_number}` \r\n\r\n  cy.request({\r\n    method:  \"POST\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/itsm/incident-notification/create-incident-notification\",\r\n    headers: {\r\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: argsObj.payload.tc4_ITSM.Post_Send_Incident_Notification ? argsObj.payload.tc4_ITSM.Post_Send_Incident_Notification :  {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Create Send Incident Notification\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"201\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n\r\n    /*================================================================= END OF POST_Send Incident Notification API=============================================== */\r\n    \r\n    /*================================================================= START OF GET_Incident Monitoring_Event_details API=============================================== */\r\n    cy.request({\r\n        method:  \"GET\",\r\n        url: argsObj.payload.baseUrl + \"/api/v1/itsm/event-details/9ec2902a-8fa1-11ee-8df3-106fd90564441\",\r\n        headers: {\r\n              'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n        },\r\n        failOnStatusCode : false,\r\n        body: {}\r\n      }).then(resp => {\r\n        console.log('\\n\\n resp ==>'); console.log(resp);\r\n        let startTs = (new Date()).getTime()\r\n        config.testCaseStartTs = config.currentTs= startTs;\r\n        logObj.testCases.push({\r\n          name:  \"GET_Incident Monitoring_Event_details\",\r\n          passFailFlag: 'Pass',\r\n          duration: (new Date()).getTime(),\r\n          tag: ticketNbr,\r\n          childTestCases: [\r\n            {\r\n              name: 'Is resp.status = 200',\r\n              passFailFlag: 'Fail',\r\n              duration: (new Date()).getTime()\r\n            },\r\n            {\r\n              name: 'Is resp.isOkStatusCode = true',\r\n              passFailFlag: 'Fail'\r\n            }\r\n          ]\r\n        })\r\n        \r\n        let apiResponse,index= logObj.testCases.length-1;\r\n        apiResponse = resp;\r\n        let responseStatusCode =  \"200\";\r\n        let responseType = \"object\";\r\n    \r\n        logObj.testCases[index].childTestCases[0] = {\r\n          name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n          json: resp.body,\r\n          passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n          duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n        };\r\n        config.currentTs= startTs = (new Date()).getTime()\r\n    \r\n        logObj.testCases[index].childTestCases[1] = {\r\n          name: `\"isOkStatusCode\" of Response is true`,\r\n          passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n          duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n        };\r\n        config.currentTs= startTs = (new Date()).getTime()\r\n    \r\n        if(resp.status >= 200 && resp.status <= 299) {        \r\n           logObj.testCases[index].childTestCases.push({\r\n                    name: 'Is response body of type' + responseType,\r\n                    passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                    });\r\n                    config.currentTs= startTs = (new Date()).getTime()\r\n           logObj.testCases[index].childTestCases.push({\r\n                    name: 'Type of response body should be \"object\" and respBody should not null',\r\n                    passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                    });\r\n                    config.currentTs= startTs = (new Date()).getTime()  \r\n      \r\n          logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n          logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n          return apiResponse;\r\n        }\r\n      })\r\n    \r\n    /*================================================================= END OF GET_Incident Monitoring_Event-details  API=============================================== */\r\n\r\n    /*================================================================= START OF GET_Incident Monitoring_Alarm-details API=============================================== */\r\n    cy.request({\r\n        method:  \"GET\",\r\n        url: argsObj.payload.baseUrl + \"/api/v1/itsm/alarm-details/717f2972-2468-45ca-a211-957837b7253a\",\r\n        headers: {\r\n              'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n        },\r\n        failOnStatusCode : false,\r\n        body: {}\r\n      }).then(resp => {\r\n        console.log('\\n\\n resp ==>'); console.log(resp);\r\n        let startTs = (new Date()).getTime()\r\n        config.testCaseStartTs = config.currentTs= startTs;\r\n        logObj.testCases.push({\r\n          name:  \" GET_Incident Monitoring_Alarm-details\",\r\n          passFailFlag: 'Pass',\r\n          duration: (new Date()).getTime(),\r\n          tag: ticketNbr,\r\n          childTestCases: [\r\n            {\r\n              name: 'Is resp.status = 200',\r\n              passFailFlag: 'Fail',\r\n              duration: (new Date()).getTime()\r\n            },\r\n            {\r\n              name: 'Is resp.isOkStatusCode = true',\r\n              passFailFlag: 'Fail'\r\n            }\r\n          ]\r\n        })\r\n        \r\n        let apiResponse,index= logObj.testCases.length-1;\r\n        apiResponse = resp;\r\n        let responseStatusCode =  \"200\";\r\n        let responseType = \"object\";\r\n    \r\n        logObj.testCases[index].childTestCases[0] = {\r\n          name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n          json: resp.body,\r\n          passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n          duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n        };\r\n        config.currentTs= startTs = (new Date()).getTime()\r\n    \r\n        logObj.testCases[index].childTestCases[1] = {\r\n          name: `\"isOkStatusCode\" of Response is true`,\r\n          passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n          duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n        };\r\n        config.currentTs= startTs = (new Date()).getTime()\r\n    \r\n        if(resp.status >= 200 && resp.status <= 299) {        \r\n           logObj.testCases[index].childTestCases.push({\r\n                    name: 'Is response body of type' + responseType,\r\n                    passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                    });\r\n                    config.currentTs= startTs = (new Date()).getTime()\r\n           logObj.testCases[index].childTestCases.push({\r\n                    name: 'Type of response body should be \"object\" and respBody should not null',\r\n                    passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                    });\r\n                    config.currentTs= startTs = (new Date()).getTime()  \r\n      \r\n          logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n          logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n          return apiResponse;\r\n        }\r\n      })\r\n    \r\n    /*================================================================= END OF GET_Incident Monitoring_Alarm-details API=============================================== */\r\n    \r\n    /*================================================================= START OF GET_Incident_Monitoring_Incident-get API=============================================== */\r\n  \r\n   \r\n    cy.request({\r\n        method:  \"GET\",\r\n        url: argsObj.payload.baseUrl + \"/api/v1/itsm/incident/3\",\r\n        headers: {\r\n              'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n        },\r\n        failOnStatusCode : false,\r\n        body: {}\r\n      }).then(resp => {\r\n        console.log('\\n\\n resp ==>'); console.log(resp);\r\n        let startTs = (new Date()).getTime()\r\n        config.testCaseStartTs = config.currentTs= startTs;\r\n        logObj.testCases.push({\r\n          name:  \"GET_Incident_Monitoring_Incident-get\",\r\n          passFailFlag: 'Pass',\r\n          duration: (new Date()).getTime(),\r\n          tag: ticketNbr,\r\n          childTestCases: [\r\n            {\r\n              name: 'Is resp.status = 200',\r\n              passFailFlag: 'Fail',\r\n              duration: (new Date()).getTime()\r\n            },\r\n            {\r\n              name: 'Is resp.isOkStatusCode = true',\r\n              passFailFlag: 'Fail'\r\n            }\r\n          ]\r\n        })\r\n        \r\n        let apiResponse,index= logObj.testCases.length-1;\r\n        apiResponse = resp;\r\n        let responseStatusCode =  \"200\";\r\n        let responseType = \"object\";\r\n    \r\n        logObj.testCases[index].childTestCases[0] = {\r\n          name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n          json: resp.body,\r\n          passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n          duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n        };\r\n        config.currentTs= startTs = (new Date()).getTime()\r\n    \r\n        logObj.testCases[index].childTestCases[1] = {\r\n          name: `\"isOkStatusCode\" of Response is true`,\r\n          passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n          duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n        };\r\n        config.currentTs= startTs = (new Date()).getTime()\r\n    \r\n        if(resp.status >= 200 && resp.status <= 299) {        \r\n           logObj.testCases[index].childTestCases.push({\r\n                    name: 'Is response body of type' + responseType,\r\n                    passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                    });\r\n                    config.currentTs= startTs = (new Date()).getTime()\r\n           logObj.testCases[index].childTestCases.push({\r\n                    name: 'Type of response body should be \"object\" and respBody should not null',\r\n                    passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                    });\r\n                    config.currentTs= startTs = (new Date()).getTime()  \r\n      \r\n          logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n          logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n          return apiResponse;\r\n        }\r\n      })\r\n    \r\n    \r\n    /*================================================================= END OF GET_Incident_Monitoring_Incident-get API=============================================== */\r\n    \r\n    /*================================================================= START OF PUT_Incident_Monitoring  API=============================================== */\r\n\r\n\r\nargsObj.payload.tc4_ITSM.Put_Incident_update = `PUTIncidentMonitoring ${random_number}`\r\n  cy.request({\r\n    method:  \"PUT\",\r\n    url: argsObj.payload.baseUrl + \"/api/v1/itsm/incident/2\",\r\n    headers: {\r\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    failOnStatusCode : false,\r\n    body: argsObj.payload.tc4_ITSM.Put_Incident_update ? argsObj.payload.tc4_ITSM.Put_Incident_update : {}\r\n  }).then(resp => {\r\n    console.log('\\n\\n resp ==>'); console.log(resp);\r\n    let startTs = (new Date()).getTime()\r\n    config.testCaseStartTs = config.currentTs= startTs;\r\n    logObj.testCases.push({\r\n      name:  \"Update Incident_Monitoring\",\r\n      passFailFlag: 'Pass',\r\n      duration: (new Date()).getTime(),\r\n      tag: ticketNbr,\r\n      childTestCases: [\r\n        {\r\n          name: 'Is resp.status = 200',\r\n          passFailFlag: 'Fail',\r\n          duration: (new Date()).getTime()\r\n        },\r\n        {\r\n          name: 'Is resp.isOkStatusCode = true',\r\n          passFailFlag: 'Fail'\r\n        }\r\n      ]\r\n    })\r\n    \r\n    let apiResponse,index= logObj.testCases.length-1;\r\n    apiResponse = resp;\r\n    let responseStatusCode =  \"200\";\r\n    let responseType = \"object\";\r\n\r\n    logObj.testCases[index].childTestCases[0] = {\r\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n      json: resp.body,\r\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    logObj.testCases[index].childTestCases[1] = {\r\n      name: `\"isOkStatusCode\" of Response is true`,\r\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n    };\r\n    config.currentTs= startTs = (new Date()).getTime()\r\n\r\n    if(resp.status >= 200 && resp.status <= 299) {        \r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof(resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()\r\n       logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n                });\r\n                config.currentTs= startTs = (new Date()).getTime()  \r\n  \r\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \r\n      return apiResponse;\r\n    }\r\n  })\r\n\r\n            /*================================================================= END OF PUT_Incident_Monitoring API=============================================== */\r\n\r\n\r\n});"
        },
        {
            "fileType": "Build-Payload",
            "filePath": "e2e/api/matrix/cxpm/ITSM",
            "fileName": "ITSM",
            "fileData": "[{\"specFileData\":\"import { Utils } from '../../support/utils';\\r\\nimport '@shelex/cypress-allure-plugin';\\r\\n\\r\\nCypress.Commands.add( \\\"General_POST_api_v1_iam_token\\\", (config, ticketNbr, argsObj, logObj ) => {\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs = startTs;\\r\\n    let accessToken = \\\"\\\";\\r\\n    let refreshToken = \\\"\\\";\\r\\n    let tenant =argsObj.payload.tenant\\r\\n    let logindetails={\\r\\n      \\\"email\\\":argsObj.payload.username,\\r\\n      \\\"password\\\":argsObj.payload.password\\r\\n\\r\\n    };\\r\\n    let random_number = Math.floor(Math.random() * 1000000000000) + 1;\\r\\n\\r\\n /*================================================================= START OF TOKEN API=============================================== */\\r\\n   \\r\\n  cy.request({\\r\\n    method:  \\\"POST\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/iam/token\\\",\\r\\n    headers: {\\r\\n      'Authorization': 'basic ' + btoa(argsObj.payload.username + ':' + argsObj.payload.password),\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: logindetails ? logindetails : {}\\r\\n  }).then(resp => {\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Get Token\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    accessToken = resp.body.access;\\r\\n    refreshToken = resp.body.refresh;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Ensuring access and refresh token values ',\\r\\n                json: {\\\"accessToken value- \\\":resp.body.access, \\\"refreshToken value-\\\":resp.body.refresh},\\r\\n                passFailFlag: resp.body.access !== null && resp.body.refresh !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n    /*================================================================= END OF TOKEN API=============================================== */\\r\\n\\r\\n    /*================================================================= START OF POST_NorthBound Post  API================================ */\\r\\n\\r\\n\\r\\nargsObj.payload.tc4_ITSM.Post_North_Bound_post.itsm_instance_name= `NorthBound${random_number}`  \\r\\nargsObj.payload.tc4_ITSM.Post_North_Bound_post.itsm_api_path_url= `/api/now/table/incident/12${random_number}` \\r\\n  cy.request({\\r\\n    method:  \\\"POST\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/northbound\\\",\\r\\n    headers: {\\r\\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: argsObj.payload.tc4_ITSM.Post_North_Bound_post ? argsObj.payload.tc4_ITSM.Post_North_Bound_post : {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    cy.wrap(resp.body.id).as('Put_North_Bound_put_id').then(()=> {\\r\\n    \\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Create NorthBound\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"201\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime() \\r\\n        logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing Name captured',\\r\\n                json: {\\\"Name captured from response\\\":resp.body.name,\\r\\n                    \\\"Value captured from output parameter\\\":argsObj.Count\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime() \\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n\\r\\n})\\r\\n})\\r\\n\\r\\n    /*================================================================= END OF POST_NorthBound Post API=============================================== */\\r\\n\\r\\n    /*================================================================= START OF GET_NorthBound API=============================================== */\\r\\n    cy.get('@Put_North_Bound_put_id').then((Put_North_Bound_put_id)=>{\\r\\n        cy.request({\\r\\n            method:  \\\"GET\\\",\\r\\n            url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/northbound/\\\" + Put_North_Bound_put_id,\\r\\n            headers: {\\r\\n              'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n              'Content-Type': 'application/json',\\r\\n              'Accept': 'application/json',\\r\\n            },\\r\\n            failOnStatusCode : false,\\r\\n            body: {}\\r\\n          }).then(resp => {\\r\\n            console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n            let startTs = (new Date()).getTime()\\r\\n            config.testCaseStartTs = config.currentTs= startTs;\\r\\n            logObj.testCases.push({\\r\\n              name:  \\\"NorthBound Details\\\",\\r\\n              passFailFlag: 'Pass',\\r\\n              duration: (new Date()).getTime(),\\r\\n              tag: ticketNbr,\\r\\n              childTestCases: [\\r\\n                {\\r\\n                  name: 'Is resp.status = 200',\\r\\n                  passFailFlag: 'Fail',\\r\\n                  duration: (new Date()).getTime()\\r\\n                },\\r\\n                {\\r\\n                  name: 'Is resp.isOkStatusCode = true',\\r\\n                  passFailFlag: 'Fail'\\r\\n                }\\r\\n              ]\\r\\n            })\\r\\n            \\r\\n            let apiResponse,index= logObj.testCases.length-1;\\r\\n            apiResponse = resp;\\r\\n            let responseStatusCode =  \\\"200\\\";\\r\\n            let responseType = \\\"object\\\";\\r\\n        \\r\\n            logObj.testCases[index].childTestCases[0] = {\\r\\n              name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n              json: resp.body,\\r\\n              passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n              duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n            };\\r\\n            config.currentTs= startTs = (new Date()).getTime()\\r\\n        \\r\\n            logObj.testCases[index].childTestCases[1] = {\\r\\n              name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n              passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n              duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            };\\r\\n            config.currentTs= startTs = (new Date()).getTime()\\r\\n        \\r\\n            if(resp.status >= 200 && resp.status <= 299) {        \\r\\n               logObj.testCases[index].childTestCases.push({\\r\\n                        name: 'Is response body of type' + responseType,\\r\\n                        passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                        duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                        });\\r\\n                        config.currentTs= startTs = (new Date()).getTime()\\r\\n               logObj.testCases[index].childTestCases.push({\\r\\n                        name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                        passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                        duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                        });\\r\\n                        config.currentTs= startTs = (new Date()).getTime()  \\r\\n                logObj.testCases[index].childTestCases.push({\\r\\n                        name: 'Comparing count captured',\\r\\n                        json: {\\\"Id Value captured from response\\\":resp.body.id,\\r\\n                            \\\"Value captured from output parameter\\\":argsObj.Count\\r\\n                        },\\r\\n                        passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                        duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                        });\\r\\n                        config.currentTs= startTs = (new Date()).getTime()         \\r\\n                \\r\\n          \\r\\n              logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n              logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n              return apiResponse;\\r\\n            }\\r\\n    })\\r\\n})          \\r\\n\\r\\n    /*================================================================= END OF GET_NorthBound API=============================================== */\\r\\n    \\r\\n    /*================================================================= START OF PUT_NorthBound API=============================================== */\\r\\n\\r\\n\\r\\n  argsObj.payload.tc4_ITSM.Put_North_Bound_put.itsm_instance_name = `UpdateNorthBound${random_number}`\\r\\n  cy.get('@Put_North_Bound_put_id').then((Put_North_Bound_put_id)=>{\\r\\n  \\r\\n  cy.request({\\r\\n    method:  \\\"PUT\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/northbound/\\\" + Put_North_Bound_put_id,\\r\\n    headers: {\\r\\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: argsObj.payload.tc4_ITSM.Put_North_Bound_put ? argsObj.payload.tc4_ITSM.Put_North_Bound_put : {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    cy.wrap(resp.body.id).as('itsm_instance_id').then(()=> {\\r\\n  \\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Update NorthBound\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing active status captured',\\r\\n                json: {\\\"Active status captured from response\\\":resp.body.active,\\r\\n                    \\\"active status captured from output parameter\\\":argsObj.active\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime() \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n})\\r\\n  })\\r\\n      /*================================================================= END OF PUT_NorthBound API=============================================== */\\r\\n     /*================================================================= START OF GET NorthBound List API==================================== */\\r\\n\\r\\n\\r\\n \\r\\n  cy.request({\\r\\n    method:  \\\"GET\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/northbound/views\\\",\\r\\n    headers: {\\r\\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"GET_NorthBound_List\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n        logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing count captured',\\r\\n                json: {\\\"Value captured from response\\\":resp.body.count,\\r\\n                    \\\"Value captured from output parameter\\\":argsObj.Count\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n})\\r\\n\\r\\n\\r\\n    /*================================================================= END OF GET NorthBound List API==================================== */\\r\\n\\r\\n    /*================================================================= START OF POST_ITSM Rules API=============================================== */\\r\\ncy.get('@itsm_instance_id').then((itsm_instance_id)=>{\\r\\n\\r\\nargsObj.payload.tc4_ITSM.Post_ITSM_rules_Post.instance_name= itsm_instance_id\\r\\n\\r\\n\\r\\ncy.request({\\r\\n  method:  \\\"POST\\\",\\r\\n  url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/itsm_rule\\\",\\r\\n  headers: {\\r\\n    'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n    'Content-Type': 'application/json',\\r\\n    'Accept': 'application/json',\\r\\n  },\\r\\n  failOnStatusCode : false,\\r\\n  body: argsObj.payload.tc4_ITSM.Post_ITSM_rules_Post ? argsObj.payload.tc4_ITSM.Post_ITSM_rules_Post :  {}\\r\\n}).then(resp => {\\r\\n  console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n  cy.wrap(resp.body.id).as('ITSM_rules_id').then(() => {\\r\\n  let startTs = (new Date()).getTime()\\r\\n  config.testCaseStartTs = config.currentTs= startTs;\\r\\n  logObj.testCases.push({\\r\\n    name:  \\\"Create ITSM Rules\\\",\\r\\n    passFailFlag: 'Pass',\\r\\n    duration: (new Date()).getTime(),\\r\\n    tag: ticketNbr,\\r\\n    childTestCases: [\\r\\n      {\\r\\n        name: 'Is resp.status = 200',\\r\\n        passFailFlag: 'Fail',\\r\\n        duration: (new Date()).getTime()\\r\\n      },\\r\\n      {\\r\\n        name: 'Is resp.isOkStatusCode = true',\\r\\n        passFailFlag: 'Fail'\\r\\n      }\\r\\n    ]\\r\\n  })\\r\\n  \\r\\n  let apiResponse,index= logObj.testCases.length-1;\\r\\n  apiResponse = resp;\\r\\n  let responseStatusCode =  \\\"201\\\";\\r\\n  let responseType = \\\"object\\\";\\r\\n\\r\\n  logObj.testCases[index].childTestCases[0] = {\\r\\n    name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n    json: resp.body,\\r\\n    passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n    duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n  };\\r\\n  config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n  logObj.testCases[index].childTestCases[1] = {\\r\\n    name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n    passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n  };\\r\\n  config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n  if(resp.status >= 200 && resp.status <= 299) {        \\r\\n     logObj.testCases[index].childTestCases.push({\\r\\n              name: 'Is response body of type' + responseType,\\r\\n              passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n              duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n              });\\r\\n              config.currentTs= startTs = (new Date()).getTime()\\r\\n     logObj.testCases[index].childTestCases.push({\\r\\n              name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n              passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n              duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n              });\\r\\n              config.currentTs= startTs = (new Date()).getTime()  \\r\\n\\r\\n    logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n    logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n    return apiResponse;\\r\\n  }\\r\\n})\\r\\n})\\r\\n})\\r\\n       /*================================================================= END OF POST_ITSM Rules API=============================================== */\\r\\n\\r\\n\\r\\n      /*================================================================= START OF GET_ITSM Rules API=============================================== */\\r\\ncy.get('@ITSM_rules_id').then((ITSM_rules_id)=>{\\r\\n        \\r\\n\\r\\n  cy.request({\\r\\n    method:  \\\"GET\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/itsm_rule/\\\" +ITSM_rules_id,\\r\\n    headers: {\\r\\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"ITSM Rules Details\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing Name captured',\\r\\n                json: {\\\"Name captured from response\\\":resp.body.name,\\r\\n                    \\\"name captured from output parameter\\\":argsObj.name\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n})\\r\\n\\r\\n\\r\\n      /*================================================================= END OF GET_ITSM Rules API=============================================== */\\r\\n\\r\\n     /*================================================================= START OF PUT_ITSM Rules API=============================================== */\\r\\ncy.get('@itsm_instance_id').then((itsm_instance_id)=>{\\r\\n\\r\\nargsObj.payload.tc4_ITSM.Put_ITSM_rules_Put.instance_name= itsm_instance_id\\r\\ncy.get('@ITSM_rules_id').then((ITSM_rules_id)=>{\\r\\n    \\r\\n \\r\\n  cy.request({\\r\\n    method:  \\\"PUT\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/itsm_rule/\\\" + ITSM_rules_id,\\r\\n    headers: {\\r\\n    'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: argsObj.payload.tc4_ITSM.Put_ITSM_rules_Put ? argsObj.payload.tc4_ITSM.Put_ITSM_rules_Put : {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Update ITSM Rules\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing Active Status captured',\\r\\n                json: {\\\"Active Status  captured from response\\\":resp.body.Active,\\r\\n                    \\\"Value captured from output parameter\\\":argsObj.Count\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n\\r\\n})\\r\\n     })\\r\\n     /*================================================================= END OF PUT_ITSM Rules API=============================================== */\\r\\n \\r\\n     /*================================================================= START OF GET_ITSM Rules API=============================================== */\\r\\n  \\r\\n  cy.request({\\r\\n    method:  \\\"GET\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/itsm_rule\\\",\\r\\n    headers: {\\r\\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"List ITSM Rules\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n        logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Comparing count captured',\\r\\n                json: {\\\"Count value captured from response\\\":resp.body.count,\\r\\n                    \\\"Value captured from output parameter\\\":argsObj.count\\r\\n                },\\r\\n                passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n})\\r\\n\\r\\n      /*================================================================= END OF GET_ITSM Rules API=============================================== */\\r\\n\\r\\n     /*================================================================= START OF GET_ITSM Rules/device type API=============================================== */\\r\\n  \\r\\n    cy.request({\\r\\n      method:  \\\"GET\\\",\\r\\n      url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/itsm_rule/get_devices?device_type=1\\\",\\r\\n      headers: {\\r\\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n        'Content-Type': 'application/json',\\r\\n        'Accept': 'application/json',\\r\\n      },\\r\\n      failOnStatusCode : false,\\r\\n      body: {}\\r\\n    }).then(resp => {\\r\\n      console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n      let startTs = (new Date()).getTime()\\r\\n      config.testCaseStartTs = config.currentTs= startTs;\\r\\n      logObj.testCases.push({\\r\\n        name:  \\\"ITSM Rules Details\\\",\\r\\n        passFailFlag: 'Pass',\\r\\n        duration: (new Date()).getTime(),\\r\\n        tag: ticketNbr,\\r\\n        childTestCases: [\\r\\n          {\\r\\n            name: 'Is resp.status = 200',\\r\\n            passFailFlag: 'Fail',\\r\\n            duration: (new Date()).getTime()\\r\\n          },\\r\\n          {\\r\\n            name: 'Is resp.isOkStatusCode = true',\\r\\n            passFailFlag: 'Fail'\\r\\n          }\\r\\n        ]\\r\\n      })\\r\\n      \\r\\n      let apiResponse,index= logObj.testCases.length-1;\\r\\n      apiResponse = resp;\\r\\n      let responseStatusCode =  \\\"200\\\";\\r\\n      let responseType = \\\"object\\\";\\r\\n  \\r\\n      logObj.testCases[index].childTestCases[0] = {\\r\\n        name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n        json: resp.body,\\r\\n        passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n        duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n      };\\r\\n      config.currentTs= startTs = (new Date()).getTime()\\r\\n  \\r\\n      logObj.testCases[index].childTestCases[1] = {\\r\\n        name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n        passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n        duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n      };\\r\\n      config.currentTs= startTs = (new Date()).getTime()\\r\\n  \\r\\n      if(resp.status >= 200 && resp.status <= 299) {        \\r\\n         logObj.testCases[index].childTestCases.push({\\r\\n                  name: 'Is response body of type' + responseType,\\r\\n                  passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                  });\\r\\n                  config.currentTs= startTs = (new Date()).getTime()\\r\\n         logObj.testCases[index].childTestCases.push({\\r\\n                  name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                  passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                  });\\r\\n                  config.currentTs= startTs = (new Date()).getTime()  \\r\\n         logObj.testCases[index].childTestCases.push({\\r\\n                  name: 'Comparing Name captured',\\r\\n                  json: {\\\"Name captured from response\\\":resp.body.name,\\r\\n                      \\\"name captured from output parameter\\\":argsObj.name\\r\\n                  },\\r\\n                  passFailFlag: argsObj.totalWindows === undefined || argsObj.totalWindows===resp.body.count ? 'Pass' : 'Fail',\\r\\n                  duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                  });\\r\\n                  config.currentTs= startTs = (new Date()).getTime()\\r\\n        logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n        logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n        return apiResponse;\\r\\n      }\\r\\n    })\\r\\n     /*================================================================= END OF GET_ITSM Rules/device type API=============================================== */\\r\\n\\r\\n \\r\\n\\r\\n    /*================================================================= START OF POST_Incident Notification API=============================================== */\\r\\n\\r\\nargsObj.payload.tc4_ITSM.Post_Incident_Notification_Post.name= `IncidentNotification ${random_number}` \\r\\n\\r\\n  cy.request({\\r\\n    method:  \\\"POST\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/incidentnotification\\\",\\r\\n    headers: {\\r\\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: argsObj.payload.tc4_ITSM.Post_Incident_Notification_Post ? argsObj.payload.tc4_ITSM.Post_Incident_Notification_Post :  {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    cy.wrap(resp.body).as('Incident_Notification').then(() => {\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Create Incident Notification\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"201\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n})\\r\\n    /*================================================================= END OF POST_Incident Notification API=============================================== */\\r\\n\\r\\n    /*================================================================= START OF GET_Incident Notification API=============================================== */\\r\\n\\r\\ncy.get('@Incident_Notification').then((Incident_Notification)=>{\\r\\n\\r\\n  cy.request({\\r\\n    method:  \\\"GET\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/incidentnotification/\\\" + Incident_Notification.id,\\r\\n    headers: {\\r\\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    cy.wrap(resp.body).as('Get_Incident_Notification_instancename').then(() => {\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Incident Notification Details\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n})\\r\\n})\\r\\n    /*================================================================= END OF GET_Incident Notification API=============================================== */\\r\\n       /*================================================================= START OF GET_Incident Notification API=============================================== */\\r\\n\\r\\n \\r\\n  cy.request({\\r\\n    method:  \\\"GET\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/incidentnotification/views?standalone=yes&page=1&limit=10&search=&ordering=name\\\",\\r\\n    headers: {\\r\\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"List Incident Notification\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n\\r\\n\\r\\n    /*================================================================= END OF GET_Incident Notification API=============================================== */\\r\\n\\r\\n\\r\\n    /*================================================================= START OF PUT_Incident Notification API=============================================== */\\r\\n\\r\\n\\r\\nargsObj.payload.tc4_ITSM.Put_Incident_Notification_Put.name = `PUTIncidentNotification ${random_number}`\\r\\ncy.get('@Incident_Notification').then((Incident_Notification)=>{\\r\\n  cy.request({\\r\\n    method:  \\\"PUT\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/incidentnotification/\\\" + Incident_Notification.id,\\r\\n    headers: {\\r\\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: argsObj.payload.tc4_ITSM.Put_Incident_Notification_Put ? argsObj.payload.tc4_ITSM.Put_Incident_Notification_Put : {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Update Incident Notification\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n})\\r\\n    /*================================================================= END OF PUT_Incident Notification API=============================================== */\\r\\n    \\r\\n    /*================================================================= START OF GET_Incident Notification Get Instance API=============================================== */\\r\\n    cy.get('@Incident_Notification').then((Incident_Notification)=>{\\r\\n\\r\\n  cy.request({\\r\\n    method:  \\\"GET\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/incidentnotification/get_instance?type=\\\"+Incident_Notification.type,\\r\\n    headers: {\\r\\n      'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\" Get Instance Details\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n    })\\r\\n    /*================================================================= END OF GET_Incident Notification Get Instance API=============================================== */\\r\\n\\r\\n    /*================================================================= START OF GET_Incident Notification Get Instance Tooltip API=============================================== */\\r\\n   \\r\\n    cy.get('@Get_Incident_Notification_instancename').then((Get_Incident_Notification_instancename)=>{\\r\\n    \\r\\n   cy.request({\\r\\n     method:  \\\"GET\\\",\\r\\n     url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/incidentnotification/get_instance_tooltip?itsm_instance_name=\\\"+Get_Incident_Notification_instancename.instance_name,\\r\\n     headers: {\\r\\n           'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n       'Content-Type': 'application/json',\\r\\n       'Accept': 'application/json',\\r\\n     },\\r\\n     failOnStatusCode : false,\\r\\n     body: {}\\r\\n   }).then(resp => {\\r\\n     console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n \\r\\n     let startTs = (new Date()).getTime()\\r\\n     config.testCaseStartTs = config.currentTs= startTs;\\r\\n     logObj.testCases.push({\\r\\n       name:  \\\"Get Instance Tooltip Details\\\",\\r\\n       passFailFlag: 'Pass',\\r\\n       duration: (new Date()).getTime(),\\r\\n       tag: ticketNbr,\\r\\n       childTestCases: [\\r\\n         {\\r\\n           name: 'Is resp.status = 200',\\r\\n           passFailFlag: 'Fail',\\r\\n           duration: (new Date()).getTime()\\r\\n         },\\r\\n         {\\r\\n           name: 'Is resp.isOkStatusCode = true',\\r\\n           passFailFlag: 'Fail'\\r\\n         }\\r\\n       ]\\r\\n     })\\r\\n     \\r\\n     let apiResponse,index= logObj.testCases.length-1;\\r\\n     apiResponse = resp;\\r\\n     let responseStatusCode =  \\\"200\\\";\\r\\n     let responseType = \\\"object\\\";\\r\\n \\r\\n     logObj.testCases[index].childTestCases[0] = {\\r\\n       name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n       json: resp.body,\\r\\n       passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n       duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n     };\\r\\n     config.currentTs= startTs = (new Date()).getTime()\\r\\n \\r\\n     logObj.testCases[index].childTestCases[1] = {\\r\\n       name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n       passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n       duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n     };\\r\\n     config.currentTs= startTs = (new Date()).getTime()\\r\\n \\r\\n     if(resp.status >= 200 && resp.status <= 299) {        \\r\\n        logObj.testCases[index].childTestCases.push({\\r\\n                 name: 'Is response body of type' + responseType,\\r\\n                 passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                 duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                 });\\r\\n                 config.currentTs= startTs = (new Date()).getTime()\\r\\n        logObj.testCases[index].childTestCases.push({\\r\\n                 name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                 passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                 duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                 });\\r\\n                 config.currentTs= startTs = (new Date()).getTime()  \\r\\n   \\r\\n       logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n       logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n       return apiResponse;\\r\\n     }\\r\\n   })\\r\\n  })\\r\\n    /*================================================================= END OF GET_Incident Notification Get Instance Tooltip API=============================================== */\\r\\n\\r\\n     \\r\\n    /*================================================================= START OF POST_ITSM Ticket API=============================================== */\\r\\n\\r\\n argsObj.payload.tc4_ITSM.Post_Ticket_Post.incident_name= `ITSM Ticket${random_number}` \\r\\n\\r\\n cy.request({\\r\\n   method:  \\\"POST\\\",\\r\\n   url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/itsm-ticket\\\",\\r\\n   headers: {\\r\\n         'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n     'Content-Type': 'application/json',\\r\\n     'Accept': 'application/json',\\r\\n   },\\r\\n   failOnStatusCode : false,\\r\\n   body: argsObj.payload.tc4_ITSM.Post_Ticket_Post ? argsObj.payload.tc4_ITSM.Post_Ticket_Post :  {}\\r\\n }).then(resp => {\\r\\n   console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n   cy.wrap(resp.body.id).as('ITSM_Ticket_id').then(()=> {\\r\\n   let startTs = (new Date()).getTime()\\r\\n   config.testCaseStartTs = config.currentTs= startTs;\\r\\n   logObj.testCases.push({\\r\\n     name:  \\\"create ITSM Ticket\\\",\\r\\n     passFailFlag: 'Pass',\\r\\n     duration: (new Date()).getTime(),\\r\\n     tag: ticketNbr,\\r\\n     childTestCases: [\\r\\n       {\\r\\n         name: 'Is resp.status = 200',\\r\\n         passFailFlag: 'Fail',\\r\\n         duration: (new Date()).getTime()\\r\\n       },\\r\\n       {\\r\\n         name: 'Is resp.isOkStatusCode = true',\\r\\n         passFailFlag: 'Fail'\\r\\n       }\\r\\n     ]\\r\\n   })\\r\\n   \\r\\n   let apiResponse,index= logObj.testCases.length-1;\\r\\n   apiResponse = resp;\\r\\n   let responseStatusCode =  \\\"201\\\";\\r\\n   let responseType = \\\"object\\\";\\r\\n\\r\\n   logObj.testCases[index].childTestCases[0] = {\\r\\n     name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n     json: resp.body,\\r\\n     passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n     duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n   };\\r\\n   config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n   logObj.testCases[index].childTestCases[1] = {\\r\\n     name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n     passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n     duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n   };\\r\\n   config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n   if(resp.status >= 200 && resp.status <= 299) {        \\r\\n      logObj.testCases[index].childTestCases.push({\\r\\n               name: 'Is response body of type' + responseType,\\r\\n               passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n               duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n               });\\r\\n               config.currentTs= startTs = (new Date()).getTime()\\r\\n      logObj.testCases[index].childTestCases.push({\\r\\n               name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n               passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n               duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n               });\\r\\n               config.currentTs= startTs = (new Date()).getTime()  \\r\\n \\r\\n     logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n     logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n     return apiResponse;\\r\\n   }\\r\\n })\\r\\n})\\r\\n   /*================================================================= END OF POST_ITSM Ticket API=============================================== */\\r\\n  \\r\\n   /*================================================================= START OF PUT_ITSM Ticket  API=============================================== */\\r\\n\\r\\n\\r\\nargsObj.payload.tc4_ITSM.Put_Ticket_Put.incident_name = `ITSMTicket ${random_number}`\\r\\ncy.get('@ITSM_Ticket_id').then((ITSM_Ticket_id)=>{\\r\\ncy.request({\\r\\nmethod:  \\\"PUT\\\",\\r\\nurl: argsObj.payload.baseUrl + \\\"/api/v1/itsm/itsm-ticket/\\\" + ITSM_Ticket_id,\\r\\nheaders: {\\r\\n     'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n 'Content-Type': 'application/json',\\r\\n 'Accept': 'application/json',\\r\\n},\\r\\nfailOnStatusCode : false,\\r\\nbody: argsObj.payload.tc4_ITSM.Put_Ticket_Put ? argsObj.payload.tc4_ITSM.Put_Ticket_Put : {}\\r\\n}).then(resp => {\\r\\nconsole.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\nlet startTs = (new Date()).getTime()\\r\\nconfig.testCaseStartTs = config.currentTs= startTs;\\r\\nlogObj.testCases.push({\\r\\n name:  \\\"Update ITSM ticket\\\",\\r\\n passFailFlag: 'Pass',\\r\\n duration: (new Date()).getTime(),\\r\\n tag: ticketNbr,\\r\\n childTestCases: [\\r\\n   {\\r\\n     name: 'Is resp.status = 200',\\r\\n     passFailFlag: 'Fail',\\r\\n     duration: (new Date()).getTime()\\r\\n   },\\r\\n   {\\r\\n     name: 'Is resp.isOkStatusCode = true',\\r\\n     passFailFlag: 'Fail'\\r\\n   }\\r\\n ]\\r\\n})\\r\\n\\r\\nlet apiResponse,index= logObj.testCases.length-1;\\r\\napiResponse = resp;\\r\\nlet responseStatusCode =  \\\"200\\\";\\r\\nlet responseType = \\\"object\\\";\\r\\n\\r\\nlogObj.testCases[index].childTestCases[0] = {\\r\\n name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n json: resp.body,\\r\\n passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n};\\r\\nconfig.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\nlogObj.testCases[index].childTestCases[1] = {\\r\\n name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n};\\r\\nconfig.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\nif(resp.status >= 200 && resp.status <= 299) {        \\r\\n  logObj.testCases[index].childTestCases.push({\\r\\n           name: 'Is response body of type' + responseType,\\r\\n           passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n           duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n           });\\r\\n           config.currentTs= startTs = (new Date()).getTime()\\r\\n  logObj.testCases[index].childTestCases.push({\\r\\n           name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n           passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n           duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n           });\\r\\n           config.currentTs= startTs = (new Date()).getTime()  \\r\\n\\r\\n logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n return apiResponse;\\r\\n}\\r\\n})\\r\\n})\\r\\n  /*================================================================= END OF PUT_ITSM Ticket API=============================================== */\\r\\n\\r\\n /*================================================================= START OF GET_ITSM Ticket API=============================================== */\\r\\ncy.request({\\r\\n  method:  \\\"GET\\\",\\r\\n  url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/itsm-ticket/views\\\",\\r\\n  headers: {\\r\\n        'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n    'Content-Type': 'application/json',\\r\\n    'Accept': 'application/json',\\r\\n  },\\r\\n  failOnStatusCode : false,\\r\\n  body: {}\\r\\n}).then(resp => {\\r\\n  console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n  let startTs = (new Date()).getTime()\\r\\n  config.testCaseStartTs = config.currentTs= startTs;\\r\\n  logObj.testCases.push({\\r\\n    name:  \\\"Get ITSM ticket\\\",\\r\\n    passFailFlag: 'Pass',\\r\\n    duration: (new Date()).getTime(),\\r\\n    tag: ticketNbr,\\r\\n    childTestCases: [\\r\\n      {\\r\\n        name: 'Is resp.status = 200',\\r\\n        passFailFlag: 'Fail',\\r\\n        duration: (new Date()).getTime()\\r\\n      },\\r\\n      {\\r\\n        name: 'Is resp.isOkStatusCode = true',\\r\\n        passFailFlag: 'Fail'\\r\\n      }\\r\\n    ]\\r\\n  })\\r\\n  \\r\\n  let apiResponse,index= logObj.testCases.length-1;\\r\\n  apiResponse = resp;\\r\\n  let responseStatusCode =  \\\"200\\\";\\r\\n  let responseType = \\\"object\\\";\\r\\n\\r\\n  logObj.testCases[index].childTestCases[0] = {\\r\\n    name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n    json: resp.body,\\r\\n    passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n    duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n  };\\r\\n  config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n  logObj.testCases[index].childTestCases[1] = {\\r\\n    name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n    passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n  };\\r\\n  config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n  if(resp.status >= 200 && resp.status <= 299) {        \\r\\n     logObj.testCases[index].childTestCases.push({\\r\\n              name: 'Is response body of type' + responseType,\\r\\n              passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n              duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n              });\\r\\n              config.currentTs= startTs = (new Date()).getTime()\\r\\n     logObj.testCases[index].childTestCases.push({\\r\\n              name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n              passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n              duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n              });\\r\\n              config.currentTs= startTs = (new Date()).getTime()  \\r\\n\\r\\n    logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n    logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n    return apiResponse;\\r\\n  }\\r\\n})\\r\\n\\r\\n          /*================================================================= END OF GET_ITSM Ticket API=============================================== */\\r\\n   \\r\\n\\r\\n    /*================================================================= START OF POST_Send Incident Notification API=============================================== */\\r\\n\\r\\nargsObj.payload.tc4_ITSM.Post_Send_Incident_Notification.name= `IncidentNotification ${random_number}` \\r\\n\\r\\n  cy.request({\\r\\n    method:  \\\"POST\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/incident-notification/create-incident-notification\\\",\\r\\n    headers: {\\r\\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: argsObj.payload.tc4_ITSM.Post_Send_Incident_Notification ? argsObj.payload.tc4_ITSM.Post_Send_Incident_Notification :  {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Create Send Incident Notification\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"201\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n\\r\\n    /*================================================================= END OF POST_Send Incident Notification API=============================================== */\\r\\n    \\r\\n    /*================================================================= START OF GET_Incident Monitoring_Event_details API=============================================== */\\r\\n    cy.request({\\r\\n        method:  \\\"GET\\\",\\r\\n        url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/event-details/9ec2902a-8fa1-11ee-8df3-106fd90564441\\\",\\r\\n        headers: {\\r\\n              'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n          'Content-Type': 'application/json',\\r\\n          'Accept': 'application/json',\\r\\n        },\\r\\n        failOnStatusCode : false,\\r\\n        body: {}\\r\\n      }).then(resp => {\\r\\n        console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n        let startTs = (new Date()).getTime()\\r\\n        config.testCaseStartTs = config.currentTs= startTs;\\r\\n        logObj.testCases.push({\\r\\n          name:  \\\"GET_Incident Monitoring_Event_details\\\",\\r\\n          passFailFlag: 'Pass',\\r\\n          duration: (new Date()).getTime(),\\r\\n          tag: ticketNbr,\\r\\n          childTestCases: [\\r\\n            {\\r\\n              name: 'Is resp.status = 200',\\r\\n              passFailFlag: 'Fail',\\r\\n              duration: (new Date()).getTime()\\r\\n            },\\r\\n            {\\r\\n              name: 'Is resp.isOkStatusCode = true',\\r\\n              passFailFlag: 'Fail'\\r\\n            }\\r\\n          ]\\r\\n        })\\r\\n        \\r\\n        let apiResponse,index= logObj.testCases.length-1;\\r\\n        apiResponse = resp;\\r\\n        let responseStatusCode =  \\\"200\\\";\\r\\n        let responseType = \\\"object\\\";\\r\\n    \\r\\n        logObj.testCases[index].childTestCases[0] = {\\r\\n          name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n          json: resp.body,\\r\\n          passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n          duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs= startTs = (new Date()).getTime()\\r\\n    \\r\\n        logObj.testCases[index].childTestCases[1] = {\\r\\n          name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n          passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n          duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs= startTs = (new Date()).getTime()\\r\\n    \\r\\n        if(resp.status >= 200 && resp.status <= 299) {        \\r\\n           logObj.testCases[index].childTestCases.push({\\r\\n                    name: 'Is response body of type' + responseType,\\r\\n                    passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                    });\\r\\n                    config.currentTs= startTs = (new Date()).getTime()\\r\\n           logObj.testCases[index].childTestCases.push({\\r\\n                    name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                    passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                    });\\r\\n                    config.currentTs= startTs = (new Date()).getTime()  \\r\\n      \\r\\n          logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n          logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n          return apiResponse;\\r\\n        }\\r\\n      })\\r\\n    \\r\\n    /*================================================================= END OF GET_Incident Monitoring_Event-details  API=============================================== */\\r\\n\\r\\n    /*================================================================= START OF GET_Incident Monitoring_Alarm-details API=============================================== */\\r\\n    cy.request({\\r\\n        method:  \\\"GET\\\",\\r\\n        url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/alarm-details/717f2972-2468-45ca-a211-957837b7253a\\\",\\r\\n        headers: {\\r\\n              'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n          'Content-Type': 'application/json',\\r\\n          'Accept': 'application/json',\\r\\n        },\\r\\n        failOnStatusCode : false,\\r\\n        body: {}\\r\\n      }).then(resp => {\\r\\n        console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n        let startTs = (new Date()).getTime()\\r\\n        config.testCaseStartTs = config.currentTs= startTs;\\r\\n        logObj.testCases.push({\\r\\n          name:  \\\" GET_Incident Monitoring_Alarm-details\\\",\\r\\n          passFailFlag: 'Pass',\\r\\n          duration: (new Date()).getTime(),\\r\\n          tag: ticketNbr,\\r\\n          childTestCases: [\\r\\n            {\\r\\n              name: 'Is resp.status = 200',\\r\\n              passFailFlag: 'Fail',\\r\\n              duration: (new Date()).getTime()\\r\\n            },\\r\\n            {\\r\\n              name: 'Is resp.isOkStatusCode = true',\\r\\n              passFailFlag: 'Fail'\\r\\n            }\\r\\n          ]\\r\\n        })\\r\\n        \\r\\n        let apiResponse,index= logObj.testCases.length-1;\\r\\n        apiResponse = resp;\\r\\n        let responseStatusCode =  \\\"200\\\";\\r\\n        let responseType = \\\"object\\\";\\r\\n    \\r\\n        logObj.testCases[index].childTestCases[0] = {\\r\\n          name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n          json: resp.body,\\r\\n          passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n          duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs= startTs = (new Date()).getTime()\\r\\n    \\r\\n        logObj.testCases[index].childTestCases[1] = {\\r\\n          name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n          passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n          duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs= startTs = (new Date()).getTime()\\r\\n    \\r\\n        if(resp.status >= 200 && resp.status <= 299) {        \\r\\n           logObj.testCases[index].childTestCases.push({\\r\\n                    name: 'Is response body of type' + responseType,\\r\\n                    passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                    });\\r\\n                    config.currentTs= startTs = (new Date()).getTime()\\r\\n           logObj.testCases[index].childTestCases.push({\\r\\n                    name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                    passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                    });\\r\\n                    config.currentTs= startTs = (new Date()).getTime()  \\r\\n      \\r\\n          logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n          logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n          return apiResponse;\\r\\n        }\\r\\n      })\\r\\n    \\r\\n    /*================================================================= END OF GET_Incident Monitoring_Alarm-details API=============================================== */\\r\\n    \\r\\n    /*================================================================= START OF GET_Incident_Monitoring_Incident-get API=============================================== */\\r\\n  \\r\\n   \\r\\n    cy.request({\\r\\n        method:  \\\"GET\\\",\\r\\n        url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/incident/3\\\",\\r\\n        headers: {\\r\\n              'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n          'Content-Type': 'application/json',\\r\\n          'Accept': 'application/json',\\r\\n        },\\r\\n        failOnStatusCode : false,\\r\\n        body: {}\\r\\n      }).then(resp => {\\r\\n        console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n        let startTs = (new Date()).getTime()\\r\\n        config.testCaseStartTs = config.currentTs= startTs;\\r\\n        logObj.testCases.push({\\r\\n          name:  \\\"GET_Incident_Monitoring_Incident-get\\\",\\r\\n          passFailFlag: 'Pass',\\r\\n          duration: (new Date()).getTime(),\\r\\n          tag: ticketNbr,\\r\\n          childTestCases: [\\r\\n            {\\r\\n              name: 'Is resp.status = 200',\\r\\n              passFailFlag: 'Fail',\\r\\n              duration: (new Date()).getTime()\\r\\n            },\\r\\n            {\\r\\n              name: 'Is resp.isOkStatusCode = true',\\r\\n              passFailFlag: 'Fail'\\r\\n            }\\r\\n          ]\\r\\n        })\\r\\n        \\r\\n        let apiResponse,index= logObj.testCases.length-1;\\r\\n        apiResponse = resp;\\r\\n        let responseStatusCode =  \\\"200\\\";\\r\\n        let responseType = \\\"object\\\";\\r\\n    \\r\\n        logObj.testCases[index].childTestCases[0] = {\\r\\n          name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n          json: resp.body,\\r\\n          passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n          duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs= startTs = (new Date()).getTime()\\r\\n    \\r\\n        logObj.testCases[index].childTestCases[1] = {\\r\\n          name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n          passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n          duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs= startTs = (new Date()).getTime()\\r\\n    \\r\\n        if(resp.status >= 200 && resp.status <= 299) {        \\r\\n           logObj.testCases[index].childTestCases.push({\\r\\n                    name: 'Is response body of type' + responseType,\\r\\n                    passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                    });\\r\\n                    config.currentTs= startTs = (new Date()).getTime()\\r\\n           logObj.testCases[index].childTestCases.push({\\r\\n                    name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                    passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                    duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                    });\\r\\n                    config.currentTs= startTs = (new Date()).getTime()  \\r\\n      \\r\\n          logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n          logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n          return apiResponse;\\r\\n        }\\r\\n      })\\r\\n    \\r\\n    \\r\\n    /*================================================================= END OF GET_Incident_Monitoring_Incident-get API=============================================== */\\r\\n    \\r\\n    /*================================================================= START OF PUT_Incident_Monitoring  API=============================================== */\\r\\n\\r\\n\\r\\nargsObj.payload.tc4_ITSM.Put_Incident_update = `PUTIncidentMonitoring ${random_number}`\\r\\n  cy.request({\\r\\n    method:  \\\"PUT\\\",\\r\\n    url: argsObj.payload.baseUrl + \\\"/api/v1/itsm/incident/2\\\",\\r\\n    headers: {\\r\\n          'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n      'Content-Type': 'application/json',\\r\\n      'Accept': 'application/json',\\r\\n    },\\r\\n    failOnStatusCode : false,\\r\\n    body: argsObj.payload.tc4_ITSM.Put_Incident_update ? argsObj.payload.tc4_ITSM.Put_Incident_update : {}\\r\\n  }).then(resp => {\\r\\n    console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n    let startTs = (new Date()).getTime()\\r\\n    config.testCaseStartTs = config.currentTs= startTs;\\r\\n    logObj.testCases.push({\\r\\n      name:  \\\"Update Incident_Monitoring\\\",\\r\\n      passFailFlag: 'Pass',\\r\\n      duration: (new Date()).getTime(),\\r\\n      tag: ticketNbr,\\r\\n      childTestCases: [\\r\\n        {\\r\\n          name: 'Is resp.status = 200',\\r\\n          passFailFlag: 'Fail',\\r\\n          duration: (new Date()).getTime()\\r\\n        },\\r\\n        {\\r\\n          name: 'Is resp.isOkStatusCode = true',\\r\\n          passFailFlag: 'Fail'\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n    \\r\\n    let apiResponse,index= logObj.testCases.length-1;\\r\\n    apiResponse = resp;\\r\\n    let responseStatusCode =  \\\"200\\\";\\r\\n    let responseType = \\\"object\\\";\\r\\n\\r\\n    logObj.testCases[index].childTestCases[0] = {\\r\\n      name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n      json: resp.body,\\r\\n      passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    logObj.testCases[index].childTestCases[1] = {\\r\\n      name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n      passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n      duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n    };\\r\\n    config.currentTs= startTs = (new Date()).getTime()\\r\\n\\r\\n    if(resp.status >= 200 && resp.status <= 299) {        \\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof(resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()\\r\\n       logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n                });\\r\\n                config.currentTs= startTs = (new Date()).getTime()  \\r\\n  \\r\\n      logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n      logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'    \\r\\n      return apiResponse;\\r\\n    }\\r\\n  })\\r\\n\\r\\n            /*================================================================= END OF PUT_Incident_Monitoring API=============================================== */\\r\\n\\r\\n\\r\\n});\",\"endpointName\":\"General_POST_api_v1_iam_token\",\"saveGeneratedResponse\":false,\"valueOfResponseJQL\":\"\",\"fileType\":\"Test-Case\",\"inputData\":[{\"name\":\"payload\",\"type\":\"Fixture\",\"fixture_prop_name\":\"payload\",\"argsObjFlag\":true}],\"outputData\":[{\"name\":\"\",\"value_from_response\":\"\"}],\"isChecked\":true,\"sshData\":[]}]"
        },
        {
            "fileType": "Fixture",
            "filePath": "e2e/api/matrix/cxpm/ITSM",
            "fileName": "ITSM-config.json",
            "fileData": "{\"payload\":{\"fieldType\":\"object\",\"fieldValue\":{\"baseUrl\":\"https://10.105.238.236\",\"username\":\"tenant-admin@cisco.com\",\"password\":\"M@trix123\",\"tenant\":\"Cisco\",\"tc1_reporting\":{\"post_report_template\":{\"name\":\"10rkr2\",\"report_type\":1,\"report_content\":1,\"template_description\":\"Testgging nedw \",\"source\":\"Select * from report_template\",\"process\":\"return x\",\"status\":\"TRUE\",\"number_of_columns\":5},\"post_dry_run\":{\"process_code\":\"return x\",\"source\":\"select * from report_template\",\"start_date\":\"2023-09-03 11:51:00\",\"end_date\":\"2023-10-31+11:51:00\"},\"put_report_template\":{\"id\":9,\"name\":\"103\",\"template_description\":\"Testjingttggg new\",\"source\":\"Select * from report_template\",\"data_modal_source\":\"\",\"process\":\"return x\",\"report_content\":1,\"report_type\":\"1\"},\"put_report_template_datamodel\":{\"name\":\"104\",\"report_type\":\"1\",\"template_description\":\"Testingnrrsdsd dfdfdf\",\"report_content\":\"2\",\"source\":\"\",\"data_modal_source\":[\"report_template id\",\"report_template name\",\"report_template source\",\"report_template data_modal_source\"],\"process\":\"return x\"},\"post_scheduler_ondemand\":{\"scheduler_name\":\"105\",\"template\":\"3\",\"report_recipients\":\"ujjwel.dutt@cisco.com,sujeetk4@cisco.com\",\"report_description\":\"sdfsjhdf\",\"report_format\":\"xlsx\",\"start_date\":\"2023-11-02 11:40:00\",\"end_date\":\"2023-11-30 11:40:00\",\"scheduler_type\":\"On-Demand\",\"scheduled_time\":\"00:00\",\"frequency\":\"\",\"status_enabled\":false},\"post_schedular_schedule\":{\"scheduler_name\":\"10eee6\",\"template\":\"3\",\"report_description\":\"Test repggfort scheduler\",\"report_recipients\":\"ujjwel.dutt@cisco.com,sujeetk4@cisco.com\",\"report_format\":\"xlsx\",\"start_date\":\"2023-08-01 11:37:00\",\"end_date\":\"2023-11-30 11:37:00\",\"frequency\":\"Hourly\",\"scheduled_time\":\"17:08\",\"status_enabled\":true,\"scheduler_type\":\"Schedule\"},\"patch_report_scheduler\":{\"scheduler_name\":\"107\",\"template_name\":\"Test_template1\",\"report_description\":\"Test report scheduler TWO\",\"report_format\":\"xlsx\",\"start_date\":\"2023-08-01 11:37:00\",\"end_date\":\"2023-11-30 11:37:00\",\"report_recipients\":\"sujeetk4@cisco.com\",\"frequency\":\"Weekly\",\"scheduled_time\":\"22:13\",\"status_enabled\":true},\"post_catalog_history\":{\"status\":true,\"frequency\":\"MONTHLY\",\"start_time\":\"2023-02-01T00:30\",\"end_time\":\"2023-05-31T00:31\",\"scheduler_type\":\"Schedule\",\"created_by\":1,\"created_on\":\"2023-04-05 18:00:30.791104+00\",\"report_scheduler\":31,\"execute_status\":\"Scheduled\"}},\"tc2_forecasting\":{\"post_forcasting_model\":{\"model_id\":[118],\"period\":1},\"Post_trainmodel\":{\"start_date\":\"2023-09-24 00:00\",\"end_date\":\"2023-09-30 12:00\",\"step\":\"T,min\",\"allow_retrain\":true,\"seasonality\":false,\"samples\":200,\"node_id\":43,\"kpi_id\":17,\"models\":[\"Prophet\"],\"indexes\":[\"16\"]},\"get_trainmodel\":{\"node_id\":43,\"kpi_id\":17,\"models\":\"Prophet\",\"indexes\":\"16\"},\"get_autostep_size\":{\"start_date\":\"2023-09-24 00:00\",\"end_date\":\"2023-09-30 12:00\",\"node_id\":43,\"kpi_id\":17,\"index_id\":[16,14,18]},\"get_actual_data\":{\"start_date\":\"2023-09-24 00:00\",\"end_date\":\"2023-09-30 12:00\",\"node_id\":43,\"kpi_id\":17,\"index_id\":16}},\"tc4_ITSM\":{\"Post_North_Bound_post\":{\"itsm_type\":\"SN\",\"itsm_instance_name\":\"Instance1\",\"itsm_username\":\"coxdev\",\"itsm_password\":\"Cisco123!!!\",\"itsm_api_path_url\":\"/api/now/table/incident/\",\"itsm_hostname\":\"https://ven04358.service-now.com\"},\"Put_North_Bound_put\":{\"itsm_type\":\"AP\",\"itsm_instance_name\":\"Instance1\",\"itsm_username\":\"coxdev\",\"itsm_password\":\"Cisco123!!!\",\"itsm_api_path_url\":\"/api/now/table/incident\",\"itsm_hostname\":\"https://ven04358.service-now.com\"},\"Post_ITSM_rules_Post\":{\"type\":\"SN\",\"instance_name\":\"72\",\"topic\":[\"10\",\"9\"],\"device_types\":[\"5\"],\"template_id\":null,\"devices\":[\"223\"],\"severity\":[\"1\",\"3\",\"4\",\"5\",\"6\"]},\"Put_ITSM_rules_Put\":{\"instance_name\":\"6\",\"topic\":[\"7\",\"5\"],\"device_types\":[\"1\"],\"devices\":[\"17\",\"16\"],\"severity\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"],\"inc_severity\":[\"1\",\"2\"]},\"Post_Incident_Notification_Post\":{\"name\":\"Template12\",\"description\":\"descrption\",\"type\":\"EM\",\"enabled\":true,\"instance_name\":\"3\",\"notification_severity\":[\"1\"],\"device_types\":[\"5\"],\"devices\":[\"223\"]},\"Put_Incident_Notification_Put\":{\"name\":\"Template13\",\"description\":\"descrption\",\"type\":\"EM\",\"enabled\":true,\"instance_name\":\"3\",\"notification_severity\":[\"1\"],\"device_types\":[\"5\"],\"devices\":[\"223\"]},\"Post_Send_Incident_Notification\":{\"subject\":\"Notification Received: Snow Ticket Incident Created\",\"action\":\"update\",\"ticket\":{\"id\":2,\"created_on\":\"2023-07-20T07:42:49.681203Z\",\"modified_on\":\"2023-07-20T07:42:49.694731Z\",\"ticket\":\"INC0451030\",\"incident_name\":\"link down\",\"open_timestamp\":\"2023-07-10T18:15:43Z\",\"close_timestamp\":null,\"short_description\":\"add description\",\"severity\":1,\"impact\":1,\"priority\":1,\"urgency\":1,\"description\":\"sadjsadkljlkjlksad\",\"number_of_issues\":2,\"state\":2,\"sys_id\":\"431af118db32211005b083aa13961977\",\"category\":\"inquiry\",\"cmdb_ci\":\"L3-Rack6.fra-lab.net\",\"instance_id\":\"847285ad-c109-40e5-85ce-bdc0779d5636\",\"device_detail\":[\"L3-Rack6.fra-lab.net\"],\"number_of_devices\":2,\"owner\":\"asdasada\",\"snow_url\":\"https://ven04358.service-now.com\",\"acknowledged_by_user\":null,\"acknowledge_timestamp\":null,\"close_by\":null,\"last_updated_time_stamp\":null,\"cleare_by\":\"\",\"cleared_time_stamp\":null,\"incident_logs\":null,\"incident_issue_category\":null,\"incident_issue_type\":null,\"issue_details\":null,\"snow_config_id\":null,\"unique_key\":null,\"group_by_column\":null,\"created_by\":\"admin@tenant1.com\",\"modified_by\":\"admin@tenant1.com\"}},\"Put_Incident_update\":{\"id\":2,\"created_on\":\"2023-07-20T07:42:49.681203Z\",\"modified_on\":\"2023-07-20T07:42:49.694731Z\",\"ticket\":\"INC0451030\",\"incident_name\":\"link down\",\"open_timestamp\":\"2023-07-10T18:15:43Z\",\"close_timestamp\":null,\"short_description\":\"add description\",\"severity\":1,\"impact\":1,\"priority\":1,\"urgency\":1,\"description\":\"sadjsadkljlkjlksad\",\"number_of_issues\":2,\"state\":2,\"sys_id\":\"431af118db32211005b083aa13961977\",\"category\":\"inquiry\",\"cmdb_ci\":\"L3-Rack6.fra-lab.net\",\"instance_id\":\"847285ad-c109-40e5-85ce-bdc0779d5636\",\"device_detail\":[\"L3-Rack6.fra-lab.net\"],\"number_of_devices\":2,\"owner\":\"asdasada\",\"snow_url\":\"https://ven04358.service-now.com\",\"acknowledged_by_user\":null,\"acknowledge_timestamp\":null,\"close_by\":null,\"last_updated_time_stamp\":null,\"cleare_by\":\"\",\"cleared_time_stamp\":null,\"incident_logs\":null,\"incident_issue_category\":null,\"incident_issue_type\":null,\"issue_details\":null,\"snow_config_id\":null,\"unique_key\":null,\"group_by_column\":null,\"created_by\":\"admin@tenant1.com\",\"modified_by\":\"admin@tenant1.com\"},\"Post_Ticket_Post\":{\"ticket\":\"INC0088\",\"incident_name\":\"Test Inc\",\"open_timestamp\":\"2023-10-03 14:27:44.387934+00\",\"close_timestamp\":null,\"severity\":1,\"impact\":1,\"priority\":1,\"urgency\":1,\"description\":\"testing\",\"number_of_issues\":1,\"state\":1,\"sys_id\":\"ecc28693dba5b110d852a049139619a1\",\"category\":\"IQ\",\"cmdb_ci\":\"81fda06e-8a00-48cc-aa59-807a5ae10cbb\",\"instance_id\":\"81fda06e-8a00-48cc-aa59-807a5ae10cbb\",\"device_detail\":[\"COX-SVS-6454-2\"],\"number_of_devices\":1,\"owner\":\"\",\"snow_url\":\"https://ven04358.service-now.com\",\"acknowledged_by_user\":null,\"acknowledge_timestamp\":null,\"close_by\":\"\",\"last_updated_time_stamp\":null,\"cleared_by\":\"\",\"cleared_time_stamp\":null,\"incident_logs\":null,\"incident_issue_category\":\"\",\"incident_issue_type\":null,\"issue_details\":[{\"AlarmId\":\"60a380506176752d31d6201a\",\"AlarmName\":\"UCS-F0502\"}],\"snow_config_id\":null,\"unique_key\":null,\"group_by_column\":null,\"created_by_id\":null,\"modified_by_id\":null},\"Put_Ticket_Put\":{\"id\":5,\"created_on\":\"2023-10-03 14:27:44.396528+00\",\"modified_on\":\"2023-10-03 14:27:44.39657+00\",\"ticket\":\"INC0088\",\"incident_name\":\"Test Inc for update\",\"open_timestamp\":\"2023-10-03 14:27:44.387934+00\",\"close_timestamp\":null,\"severity\":1,\"impact\":1,\"priority\":1,\"urgency\":1,\"description\":\"testing\",\"number_of_issues\":1,\"state\":1,\"sys_id\":\"ecc28693dba5b110d852a049139619a1\",\"category\":\"IQ\",\"cmdb_ci\":\"81fda06e-8a00-48cc-aa59-807a5ae10cbb\",\"instance_id\":\"81fda06e-8a00-48cc-aa59-807a5ae10cbb\",\"device_detail\":[\"COX-SVS-6454-2\"],\"number_of_devices\":1,\"owner\":\"\",\"snow_url\":\"https://ven04358.service-now.com\",\"acknowledged_by_user\":null,\"acknowledge_timestamp\":null,\"close_by\":\"\",\"last_updated_time_stamp\":null,\"cleared_by\":\"\",\"cleared_time_stamp\":null,\"incident_logs\":null,\"incident_issue_category\":\"\",\"incident_issue_type\":null,\"issue_details\":[{\"AlarmId\":\"60a380506176752d31d6201a\",\"AlarmName\":\"UCS-F0502\"}],\"snow_config_id\":null,\"unique_key\":null,\"group_by_column\":null,\"created_by_id\":null,\"modified_by_id\":null}},\"tc5_predictive\":{\"post_KPI_on_node\":{\"nodes\":[43]},\"post_indexs_on_KPI\":{\"nodes\":[43],\"kpis\":[1]},\"post_detections\":{\"name\":\"Forexxcakkkkjkst\",\"description\":\"Forecast 1\",\"algorithm_type\":\"Prophet\",\"node_include\":[43],\"kpi_include\":[17],\"index_include\":[14],\"range_unit\":null,\"range_duration\":null,\"is_cron_enabled\":true,\"is_enabled\":true,\"training_start_time\":\"2023-09-24 22:30:00\",\"training_end_time\":\"2023-09-29 22:30:00\",\"cron_start_time\":\"2023-08-03T21:52:00.00+05:30\",\"cron_end_time\":\"2023-09-01T10:30:00\",\"cron_frequency\":\"Weekly\",\"critical_days\":\"11\",\"warning_days\":\"12\",\"threshold_value\":\"12\",\"forecast_period\":\"12\",\"is_percentage\":\"True\",\"crontab\":{\"minute\":\"0\",\"hour\":\"0\",\"day_of_week\":\"*\",\"day_of_month\":\"*\",\"month_of_year\":\"*\",\"timezone\":\"UTC\"}},\"put_detections\":{\"is_enabled\":true,\"is_cron_enabled\":false,\"name\":\"updated detection\",\"description\":\"description\",\"algorithm_type\":\"Prophet\",\"range_unit\":null,\"range_duration\":1,\"training_start_time\":\"2023-01-01 10:30:00\",\"training_end_time\":\"2023-02-01 10:30:00\",\"crontab\":{\"minute\":\"*\",\"hour\":\"*\",\"day_of_week\":\"*\",\"day_of_month\":\"*\",\"month_of_year\":\"*\",\"timezone\":\"UTC\"},\"cron_start_time\":\"2023-08-01T10:30:00\",\"cron_end_time\":\"2023-09-01T10:30:00\",\"cron_frequency\":\"Weekly\",\"critical_days\":10,\"warning_days\":15,\"threshold_value\":50,\"forecast_period\":10,\"is_percentage\":false,\"retention_policy\":10,\"node_include\":[1],\"kpi_include\":[2],\"index_include\":[1]},\"post_audit\":{\"schedule\":\"Daily\",\"status_of_detection\":\"FAILED\",\"success_percentage\":\"50.00\",\"detection_id\":1},\"post_demand_onrun\":{\"detection_id\":1}}},\"files\":[]}}"
        }
    ]
}