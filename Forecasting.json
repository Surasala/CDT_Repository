{
  "applicationName": "matrix",
  "testType": "api",
  "customerName": "cxpm",
  "useCaseName": "forecasting",
  "testSuiteFiles": [
    {
      "fileName": "matrix-cxpm-forecasting.cy.js",
      "filePath": "e2e/api/matrix/cxpm/forecasting",
      "fileType": "Test-Suite",
      "fileData": "import { Utils } from '../../support/utils';\nimport '../../support/api-beforeAfterBlock';\nimport \"./General_POST_api_v1_iam_token\";\n\n\n\nlet config;\nlet usecasename = 'forecasting'\nlet specfilename = 'matrix-cxpm-forecasting'\nlet configPath, execLogObj;\nlet apiDiffResponse = {}\n\ndescribe('Testing matrix for cxpm-forecasting', () => {\n  before(() => {\n    configPath = `cypress/e2e/${Cypress.env('integrationFolder')}/${usecasename}-config.json`;\n    cy.before(config, configPath, execLogObj, usecasename, apiDiffResponse).then(value => {\n      ({config, execLogObj, configPath, apiDiffResponse} = value)\n    });\n  });\n  after(() => {\n    cy.after(config, execLogObj, configPath, apiDiffResponse).then(value => ({config, execLogObj} = value));\n  });\n  it('Testing General_POST_api_v1_iam_token', () => {\n    cy.on('fail',(err,runnable)=>{\n        let error= JSON.stringify(err)\n        let index = execLogObj.testCases.length-1\n        if(index>=0){\n            execLogObj.testCases[execLogObj.testCases.length-1].childTestCases.push({\n              name:'***************ERROR !! *****************         '+ error,\n              passFailFlag: 'Fail',\n              duration:Utils.calcTimeDuration(config.currentTs, (new Date()).getTime())\n          })\n          execLogObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\n          execLogObj.testCases[index].passFailFlag =  'Fail'\n        }          \n        throw err;\n    }).then(()=>{\n        cy.task('setLogObject',{val:execLogObj,num:3})\n      })           \n    var argsObj = {\n        \tpayload:config.payload,\n    };\n    cy.General_POST_api_v1_iam_token(config, '1000', argsObj, execLogObj).then((response) => {              \n          \n    }); \n});\n\n});\n"
    },
    {
      "filePath": "e2e/api/matrix/cxpm/forecasting",
      "fileType": "Test-Case",
      "fileName": "General_POST_api_v1_iam_token.js",
      "fileData": "import { Utils } from '../../support/utils';\r\nimport '@shelex/cypress-allure-plugin';\r\n\r\nCypress.Commands.add(\"General_POST_api_v1_iam_token\", (config, ticketNbr, argsObj, logObj) => {\r\n    let accessToken = \"\";\r\n    let refreshToken = \"\";\r\n    let tenant = argsObj.payload.tenant\r\n    let logindetails = {\r\n        \"email\": argsObj.payload.username,\r\n        \"password\": argsObj.payload.password\r\n    };\r\n\r\n    /*================================================================= START OF TOKEN API=============================================== */\r\n    cy.request({\r\n        method: \"POST\",\r\n        url: argsObj.payload.baseUrl + \"/api/v1/iam/token\",\r\n        headers: {\r\n            'Authorization': 'basic ' + btoa(argsObj.username + ':' + argsObj.password),\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        failOnStatusCode: false,\r\n        body: logindetails ? logindetails : {}\r\n    }).then(resp => {\r\n        console.log('\\n\\n resp ==>'); console.log(resp);\r\n        accessToken = resp.body.access;\r\n        refreshToken = resp.body.refresh;\r\n\r\n        let responseStatusCode = \"200\";\r\n        let responseType = \"object\";\r\n        let startTs = (new Date()).getTime()\r\n        config.testCaseStartTs = config.currentTs = startTs;\r\n        logObj.testCases.push({\r\n            name: \"get-token\",\r\n            passFailFlag: 'Pass',\r\n            duration: (new Date()).getTime(),\r\n            tag: ticketNbr,\r\n            childTestCases: [\r\n                {\r\n                    name: 'Is resp.status = 200',\r\n                    passFailFlag: 'Fail',\r\n                    duration: (new Date()).getTime()\r\n                },\r\n                {\r\n                    name: 'Is resp.isOkStatusCode = true',\r\n                    passFailFlag: 'Fail'\r\n                }\r\n            ]\r\n        })\r\n        let apiResponse, index = logObj.testCases.length - 1;\r\n        apiResponse = resp;\r\n        logObj.testCases[index].childTestCases[0] = {\r\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n            json: resp.body,\r\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        logObj.testCases[index].childTestCases[1] = {\r\n            name: `\"isOkStatusCode\" of Response is true`,\r\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        if (resp.status >= 200 && resp.status <= 299) {\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof (resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n\r\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\r\n            return apiResponse;\r\n        }\r\n    })\r\n    /*================================================================= End OF TOKEN API=============================================== */\r\n\r\n\r\n    /*================================================================= START OF GET USER DATA API=============================================== */\r\n\r\n    cy.request({\r\n        method: \"GET\",\r\n        url: argsObj.payload.baseUrl + \"/api/v1/iam/user-data\",\r\n        headers: {\r\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        failOnStatusCode: false,\r\n        body: logindetails ? logindetails : {}\r\n    }).then(resp => {\r\n        console.log('\\n\\n resp ==>'); console.log(resp);\r\n        let responseStatusCode = \"200\";\r\n        let responseType = \"object\";\r\n        let startTs = (new Date()).getTime()\r\n        config.testCaseStartTs = config.currentTs = startTs;\r\n        logObj.testCases.push({\r\n            name: \"users\",\r\n            passFailFlag: 'Pass',\r\n            duration: (new Date()).getTime(),\r\n            tag: ticketNbr,\r\n            childTestCases: [\r\n                {\r\n                    name: 'Is resp.status = 200',\r\n                    passFailFlag: 'Fail',\r\n                    duration: (new Date()).getTime()\r\n                },\r\n                {\r\n                    name: 'Is resp.isOkStatusCode = true',\r\n                    passFailFlag: 'Fail'\r\n                }\r\n            ]\r\n        })\r\n\r\n        let apiResponse, index = logObj.testCases.length - 1;\r\n        apiResponse = resp;\r\n        logObj.testCases[index].childTestCases[0] = {\r\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n            json: resp.body,\r\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        logObj.testCases[index].childTestCases[1] = {\r\n            name: `\"isOkStatusCode\" of Response is true`,\r\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        if (resp.status >= 200 && resp.status <= 299) {\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof (resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n\r\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\r\n            return apiResponse;\r\n        }\r\n    })\r\n    /*================================================================= End OF GET USER DATA API=============================================== */\r\n\r\n\r\n    /*================================================================= START OF POST FORECAST MODEL API=============================================== */\r\n\r\n\r\n    cy.request({\r\n        method: \"POST\",\r\n        url: argsObj.payload.baseUrl + \"/api/v1/forecast/forecast-model/\",\r\n        headers: {\r\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        failOnStatusCode: false,\r\n        body: argsObj.payload.tc2_forecasting.post_forcasting_model ? argsObj.payload.tc2_forecasting.post_forcasting_model : {}\r\n    }).then(resp => {\r\n        console.log('\\n\\n resp ==>'); console.log(resp);\r\n        let responseStatusCode = \"200\";\r\n        let responseType = \"object\";\r\n        let startTs = (new Date()).getTime()\r\n        config.testCaseStartTs = config.currentTs = startTs;\r\n        logObj.testCases.push({\r\n            name: \"forecast-model\",\r\n            passFailFlag: 'Pass',\r\n            duration: (new Date()).getTime(),\r\n            tag: ticketNbr,\r\n            childTestCases: [\r\n                {\r\n                    name: 'Is resp.status = 200',\r\n                    passFailFlag: 'Fail',\r\n                    duration: (new Date()).getTime()\r\n                },\r\n                {\r\n                    name: 'Is resp.isOkStatusCode = true',\r\n                    passFailFlag: 'Fail'\r\n                }\r\n            ]\r\n        })\r\n\r\n        let apiResponse, index = logObj.testCases.length - 1;\r\n        apiResponse = resp;\r\n        logObj.testCases[index].childTestCases[0] = {\r\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n            json: resp.body,\r\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        logObj.testCases[index].childTestCases[1] = {\r\n            name: `\"isOkStatusCode\" of Response is true`,\r\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        if (resp.status >= 200 && resp.status <= 299) {\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof (resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n\r\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\r\n            return apiResponse;\r\n        }\r\n    })\r\n\r\n    /*================================================================= END OF POST FORECAST MODEL API=============================================== */\r\n\r\n\r\n\r\n    /*================================================================= START OF GET AUTOSTEPSIZE API=============================================== */\r\n    let start_date= argsObj.payload.tc2_forecasting.get_autostep_size.start_date\r\n\r\n    cy.request({\r\n        method: \"GET\",\r\n        url: argsObj.payload.baseUrl + \"/api/v1/forecast/get-auto-step-size?start_date=\"+start_date+\"&end_date=\"+argsObj.payload.tc2_forecasting.get_autostep_size.end_date+\"&node_id=\"+argsObj.payload.tc2_forecasting.get_autostep_size.node_id +\"&kpi_id=\"+argsObj.payload.tc2_forecasting.get_autostep_size.kpi_id +\"&index_id=\"+argsObj.payload.tc2_forecasting.get_autostep_size.index_id[0],\r\n        headers: {\r\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        failOnStatusCode: false,\r\n        body: {}\r\n    }).then(resp => {\r\n        console.log('\\n\\n resp ==>'); console.log(resp);\r\n\r\n\r\n        let responseStatusCode = \"200\";\r\n        let responseType = \"object\";\r\n        let startTs = (new Date()).getTime()\r\n        config.testCaseStartTs = config.currentTs = startTs;\r\n        logObj.testCases.push({\r\n            name: \"get-auto-step-size\",\r\n            passFailFlag: 'Pass',\r\n            duration: (new Date()).getTime(),\r\n            tag: \"Forecasting\",\r\n            childTestCases: [\r\n                {\r\n                    name: 'Is resp.status = 200',\r\n                    passFailFlag: 'Fail',\r\n                    duration: (new Date()).getTime()\r\n                },\r\n                {\r\n                    name: 'Is resp.isOkStatusCode = true',\r\n                    passFailFlag: 'Fail'\r\n                }\r\n            ]\r\n        })\r\n\r\n        let apiResponse, index = logObj.testCases.length - 1;\r\n        apiResponse = resp;\r\n        logObj.testCases[index].childTestCases[0] = {\r\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n            json: resp.body,\r\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        logObj.testCases[index].childTestCases[1] = {\r\n            name: `\"isOkStatusCode\" of Response is true`,\r\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        if (resp.status >= 200 && resp.status <= 299) {\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof (resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n\r\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\r\n            return apiResponse;\r\n        }\r\n    })\r\n    /*================================================================= END OF GET AUTOSTEPSIZE API=============================================== */\r\n\r\n\r\n    /*================================================================= START OF GET TRAIN MODEL API=============================================== */\r\n\r\n\r\n\r\n    cy.request({\r\n        method: \"GET\",\r\n        url: argsObj.payload.baseUrl + \"/api/v1/forecast/train-model/?models=\"+argsObj.payload.tc2_forecasting.get_trainmodel.models +\"&node_id=\"+argsObj.payload.tc2_forecasting.get_trainmodel.node_id+\"&kpi_id=\"+argsObj.payload.tc2_forecasting.get_trainmodel.kpi_id+\"&indexes=\"+argsObj.payload.tc2_forecasting.get_trainmodel.indexes,\r\n        headers: {\r\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        failOnStatusCode: false,\r\n        body: {}\r\n    }).then(resp => {\r\n        console.log('\\n\\n resp ==>'); console.log(resp);\r\n        let responseStatusCode = \"200\";\r\n        let responseType = \"object\";\r\n        let startTs = (new Date()).getTime()\r\n        config.testCaseStartTs = config.currentTs = startTs;\r\n        logObj.testCases.push({\r\n            name: \"train-model\",\r\n            passFailFlag: 'Pass',\r\n            duration: (new Date()).getTime(),\r\n            tag: \"forecasting\",\r\n            childTestCases: [\r\n                {\r\n                    name: 'Is resp.status = 200',\r\n                    passFailFlag: 'Fail',\r\n                    duration: (new Date()).getTime()\r\n                },\r\n                {\r\n                    name: 'Is resp.isOkStatusCode = true',\r\n                    passFailFlag: 'Fail'\r\n                }\r\n            ]\r\n        })\r\n\r\n        let apiResponse, index = logObj.testCases.length - 1;\r\n        apiResponse = resp;\r\n        logObj.testCases[index].childTestCases[0] = {\r\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n            json: resp.body,\r\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        logObj.testCases[index].childTestCases[1] = {\r\n            name: `\"isOkStatusCode\" of Response is true`,\r\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        if (resp.status >= 200 && resp.status <= 299) {\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof (resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n\r\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\r\n            return apiResponse;\r\n        }\r\n    })\r\n    /*================================================================= END OF GET TRAIN MODEL API=============================================== */\r\n\r\n    /*================================================================= START OF POST TRAIN MODEL API=============================================== */\r\n\r\n\r\n    cy.request({\r\n        method: \"POST\",\r\n        url: argsObj.payload.baseUrl + \"/api/v1/forecast/train-model/\",\r\n        headers: {\r\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        failOnStatusCode: false,\r\n        body: argsObj.payload.tc2_forecasting.Post_trainmodel ? argsObj.payload.tc2_forecasting.Post_trainmodel : {}\r\n    }).then(resp => {\r\n        console.log('\\n\\n resp ==>'); console.log(resp);\r\n\r\n        let responseStatusCode = \"200\";\r\n        let responseType = \"object\";\r\n        let startTs = (new Date()).getTime()\r\n        config.testCaseStartTs = config.currentTs = startTs;\r\n        logObj.testCases.push({\r\n            name: \"Forecast/train-model\",\r\n            passFailFlag: 'Pass',\r\n            duration: (new Date()).getTime(),\r\n            tag: \"forecasting\",\r\n            childTestCases: [\r\n                {\r\n                    name: 'Is resp.status = 200',\r\n                    passFailFlag: 'Fail',\r\n                    duration: (new Date()).getTime()\r\n                },\r\n                {\r\n                    name: 'Is resp.isOkStatusCode = true',\r\n                    passFailFlag: 'Fail'\r\n                }\r\n            ]\r\n        })\r\n\r\n        let apiResponse, index = logObj.testCases.length - 1;\r\n\r\n        apiResponse = resp;\r\n        logObj.testCases[index].childTestCases[0] = {\r\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n            json: resp.body,\r\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        logObj.testCases[index].childTestCases[1] = {\r\n            name: `\"isOkStatusCode\" of Response is true`,\r\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        if (resp.status >= 200 && resp.status <= 299) {\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof (resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n\r\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\r\n            return apiResponse;\r\n        }\r\n    })\r\n    /*================================================================= END OF POST TRAIN MODEL API=============================================== */\r\n\r\n\r\n\r\n    /*================================================================= START OF GET ACTUAL-DATA API=============================================== */\r\n\r\n\r\n\r\n    cy.request({\r\n        method: \"GET\",\r\n        url: argsObj.payload.baseUrl + \"/api/v1/forecast/get-actual-data?start_date=\"+argsObj.payload.tc2_forecasting.get_actual_data.start_date+\"&end_date=\"+argsObj.payload.tc2_forecasting.get_actual_data.end_date+\"&node_id=\"+argsObj.payload.tc2_forecasting.get_actual_data.node_id +\"&kpi_id=\"+ argsObj.payload.tc2_forecasting.get_actual_data.kpi_id+\"&index_id=\"+ argsObj.payload.tc2_forecasting.get_actual_data.index_id,\r\n        headers: {\r\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        failOnStatusCode: false,\r\n        body:{}\r\n    }).then(resp => {\r\n        console.log('\\n\\n resp ==>'); console.log(resp);\r\n\r\n\r\n        let responseStatusCode = \"200\";\r\n        let responseType = \"object\";\r\n        let startTs = (new Date()).getTime()\r\n        config.testCaseStartTs = config.currentTs = startTs;\r\n        logObj.testCases.push({\r\n            name: \"get-actual-data\",\r\n            passFailFlag: 'Pass',\r\n            duration: (new Date()).getTime(),\r\n            tag: \"forecasting\",\r\n            childTestCases: [\r\n                {\r\n                    name: 'Is resp.status = 200',\r\n                    passFailFlag: 'Fail',\r\n                    duration: (new Date()).getTime()\r\n                },\r\n                {\r\n                    name: 'Is resp.isOkStatusCode = true',\r\n                    passFailFlag: 'Fail'\r\n                }\r\n            ]\r\n        })\r\n\r\n        let apiResponse, index = logObj.testCases.length - 1;\r\n        apiResponse = resp;\r\n        logObj.testCases[index].childTestCases[0] = {\r\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\r\n            json: resp.body,\r\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        logObj.testCases[index].childTestCases[1] = {\r\n            name: `\"isOkStatusCode\" of Response is true`,\r\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\r\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n        };\r\n        config.currentTs = startTs = (new Date()).getTime()\r\n\r\n        if (resp.status >= 200 && resp.status <= 299) {\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Is response body of type' + responseType,\r\n                passFailFlag: typeof (resp.body) === \"object\" ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n            logObj.testCases[index].childTestCases.push({\r\n                name: 'Type of response body should be \"object\" and respBody should not null',\r\n                passFailFlag: \"object\" === \"object\" && resp.body !== null ? 'Pass' : 'Fail',\r\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\r\n            });\r\n            config.currentTs = startTs = (new Date()).getTime()\r\n\r\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\r\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\r\n            return apiResponse;\r\n        }\r\n    })\r\n\r\n    /*================================================================= END OF GET ACTUAL-DATA API=============================================== */\r\n\r\n});\r\n\r\n\r\n\r\n\r\n"
    },
    {
      "filePath": "e2e/api/matrix/cxpm/forecasting",
      "fileType": "Build-Payload",
      "fileName": "forecasting",
      "fileData": "[{\"specFileData\":\"import { Utils } from '../../support/utils';\\r\\nimport '@shelex/cypress-allure-plugin';\\r\\n\\r\\nCypress.Commands.add(\\\"General_POST_api_v1_iam_token\\\", (config, ticketNbr, argsObj, logObj) => {\\r\\n    let accessToken = \\\"\\\";\\r\\n    let refreshToken = \\\"\\\";\\r\\n    let tenant = argsObj.payload.tenant\\r\\n    let logindetails = {\\r\\n        \\\"email\\\": argsObj.payload.username,\\r\\n        \\\"password\\\": argsObj.payload.password\\r\\n    };\\r\\n\\r\\n    /*================================================================= START OF TOKEN API=============================================== */\\r\\n    cy.request({\\r\\n        method: \\\"POST\\\",\\r\\n        url: argsObj.payload.baseUrl + \\\"/api/v1/iam/token\\\",\\r\\n        headers: {\\r\\n            'Authorization': 'basic ' + btoa(argsObj.username + ':' + argsObj.password),\\r\\n            'Content-Type': 'application/json',\\r\\n            'Accept': 'application/json',\\r\\n        },\\r\\n        failOnStatusCode: false,\\r\\n        body: logindetails ? logindetails : {}\\r\\n    }).then(resp => {\\r\\n        console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n        accessToken = resp.body.access;\\r\\n        refreshToken = resp.body.refresh;\\r\\n\\r\\n        let responseStatusCode = \\\"200\\\";\\r\\n        let responseType = \\\"object\\\";\\r\\n        let startTs = (new Date()).getTime()\\r\\n        config.testCaseStartTs = config.currentTs = startTs;\\r\\n        logObj.testCases.push({\\r\\n            name: \\\"get-token\\\",\\r\\n            passFailFlag: 'Pass',\\r\\n            duration: (new Date()).getTime(),\\r\\n            tag: ticketNbr,\\r\\n            childTestCases: [\\r\\n                {\\r\\n                    name: 'Is resp.status = 200',\\r\\n                    passFailFlag: 'Fail',\\r\\n                    duration: (new Date()).getTime()\\r\\n                },\\r\\n                {\\r\\n                    name: 'Is resp.isOkStatusCode = true',\\r\\n                    passFailFlag: 'Fail'\\r\\n                }\\r\\n            ]\\r\\n        })\\r\\n        let apiResponse, index = logObj.testCases.length - 1;\\r\\n        apiResponse = resp;\\r\\n        logObj.testCases[index].childTestCases[0] = {\\r\\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n            json: resp.body,\\r\\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        logObj.testCases[index].childTestCases[1] = {\\r\\n            name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        if (resp.status >= 200 && resp.status <= 299) {\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof (resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\\r\\n            return apiResponse;\\r\\n        }\\r\\n    })\\r\\n    /*================================================================= End OF TOKEN API=============================================== */\\r\\n\\r\\n\\r\\n    /*================================================================= START OF GET USER DATA API=============================================== */\\r\\n\\r\\n    cy.request({\\r\\n        method: \\\"GET\\\",\\r\\n        url: argsObj.payload.baseUrl + \\\"/api/v1/iam/user-data\\\",\\r\\n        headers: {\\r\\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n            'Content-Type': 'application/json',\\r\\n            'Accept': 'application/json',\\r\\n        },\\r\\n        failOnStatusCode: false,\\r\\n        body: logindetails ? logindetails : {}\\r\\n    }).then(resp => {\\r\\n        console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n        let responseStatusCode = \\\"200\\\";\\r\\n        let responseType = \\\"object\\\";\\r\\n        let startTs = (new Date()).getTime()\\r\\n        config.testCaseStartTs = config.currentTs = startTs;\\r\\n        logObj.testCases.push({\\r\\n            name: \\\"users\\\",\\r\\n            passFailFlag: 'Pass',\\r\\n            duration: (new Date()).getTime(),\\r\\n            tag: ticketNbr,\\r\\n            childTestCases: [\\r\\n                {\\r\\n                    name: 'Is resp.status = 200',\\r\\n                    passFailFlag: 'Fail',\\r\\n                    duration: (new Date()).getTime()\\r\\n                },\\r\\n                {\\r\\n                    name: 'Is resp.isOkStatusCode = true',\\r\\n                    passFailFlag: 'Fail'\\r\\n                }\\r\\n            ]\\r\\n        })\\r\\n\\r\\n        let apiResponse, index = logObj.testCases.length - 1;\\r\\n        apiResponse = resp;\\r\\n        logObj.testCases[index].childTestCases[0] = {\\r\\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n            json: resp.body,\\r\\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        logObj.testCases[index].childTestCases[1] = {\\r\\n            name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        if (resp.status >= 200 && resp.status <= 299) {\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof (resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\\r\\n            return apiResponse;\\r\\n        }\\r\\n    })\\r\\n    /*================================================================= End OF GET USER DATA API=============================================== */\\r\\n\\r\\n\\r\\n    /*================================================================= START OF POST FORECAST MODEL API=============================================== */\\r\\n\\r\\n\\r\\n    cy.request({\\r\\n        method: \\\"POST\\\",\\r\\n        url: argsObj.payload.baseUrl + \\\"/api/v1/forecast/forecast-model/\\\",\\r\\n        headers: {\\r\\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n            'Content-Type': 'application/json',\\r\\n            'Accept': 'application/json',\\r\\n        },\\r\\n        failOnStatusCode: false,\\r\\n        body: argsObj.payload.tc2_forecasting.post_forcasting_model ? argsObj.payload.tc2_forecasting.post_forcasting_model : {}\\r\\n    }).then(resp => {\\r\\n        console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n        let responseStatusCode = \\\"200\\\";\\r\\n        let responseType = \\\"object\\\";\\r\\n        let startTs = (new Date()).getTime()\\r\\n        config.testCaseStartTs = config.currentTs = startTs;\\r\\n        logObj.testCases.push({\\r\\n            name: \\\"forecast-model\\\",\\r\\n            passFailFlag: 'Pass',\\r\\n            duration: (new Date()).getTime(),\\r\\n            tag: ticketNbr,\\r\\n            childTestCases: [\\r\\n                {\\r\\n                    name: 'Is resp.status = 200',\\r\\n                    passFailFlag: 'Fail',\\r\\n                    duration: (new Date()).getTime()\\r\\n                },\\r\\n                {\\r\\n                    name: 'Is resp.isOkStatusCode = true',\\r\\n                    passFailFlag: 'Fail'\\r\\n                }\\r\\n            ]\\r\\n        })\\r\\n\\r\\n        let apiResponse, index = logObj.testCases.length - 1;\\r\\n        apiResponse = resp;\\r\\n        logObj.testCases[index].childTestCases[0] = {\\r\\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n            json: resp.body,\\r\\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        logObj.testCases[index].childTestCases[1] = {\\r\\n            name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        if (resp.status >= 200 && resp.status <= 299) {\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof (resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\\r\\n            return apiResponse;\\r\\n        }\\r\\n    })\\r\\n\\r\\n    /*================================================================= END OF POST FORECAST MODEL API=============================================== */\\r\\n\\r\\n\\r\\n\\r\\n    /*================================================================= START OF GET AUTOSTEPSIZE API=============================================== */\\r\\n    let start_date= argsObj.payload.tc2_forecasting.get_autostep_size.start_date\\r\\n\\r\\n    cy.request({\\r\\n        method: \\\"GET\\\",\\r\\n        url: argsObj.payload.baseUrl + \\\"/api/v1/forecast/get-auto-step-size?start_date=\\\"+start_date+\\\"&end_date=\\\"+argsObj.payload.tc2_forecasting.get_autostep_size.end_date+\\\"&node_id=\\\"+argsObj.payload.tc2_forecasting.get_autostep_size.node_id +\\\"&kpi_id=\\\"+argsObj.payload.tc2_forecasting.get_autostep_size.kpi_id +\\\"&index_id=\\\"+argsObj.payload.tc2_forecasting.get_autostep_size.index_id[0],\\r\\n        headers: {\\r\\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n            'Content-Type': 'application/json',\\r\\n            'Accept': 'application/json',\\r\\n        },\\r\\n        failOnStatusCode: false,\\r\\n        body: {}\\r\\n    }).then(resp => {\\r\\n        console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n\\r\\n\\r\\n        let responseStatusCode = \\\"200\\\";\\r\\n        let responseType = \\\"object\\\";\\r\\n        let startTs = (new Date()).getTime()\\r\\n        config.testCaseStartTs = config.currentTs = startTs;\\r\\n        logObj.testCases.push({\\r\\n            name: \\\"get-auto-step-size\\\",\\r\\n            passFailFlag: 'Pass',\\r\\n            duration: (new Date()).getTime(),\\r\\n            tag: \\\"Forecasting\\\",\\r\\n            childTestCases: [\\r\\n                {\\r\\n                    name: 'Is resp.status = 200',\\r\\n                    passFailFlag: 'Fail',\\r\\n                    duration: (new Date()).getTime()\\r\\n                },\\r\\n                {\\r\\n                    name: 'Is resp.isOkStatusCode = true',\\r\\n                    passFailFlag: 'Fail'\\r\\n                }\\r\\n            ]\\r\\n        })\\r\\n\\r\\n        let apiResponse, index = logObj.testCases.length - 1;\\r\\n        apiResponse = resp;\\r\\n        logObj.testCases[index].childTestCases[0] = {\\r\\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n            json: resp.body,\\r\\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        logObj.testCases[index].childTestCases[1] = {\\r\\n            name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        if (resp.status >= 200 && resp.status <= 299) {\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof (resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\\r\\n            return apiResponse;\\r\\n        }\\r\\n    })\\r\\n    /*================================================================= END OF GET AUTOSTEPSIZE API=============================================== */\\r\\n\\r\\n\\r\\n    /*================================================================= START OF GET TRAIN MODEL API=============================================== */\\r\\n\\r\\n\\r\\n\\r\\n    cy.request({\\r\\n        method: \\\"GET\\\",\\r\\n        url: argsObj.payload.baseUrl + \\\"/api/v1/forecast/train-model/?models=\\\"+argsObj.payload.tc2_forecasting.get_trainmodel.models +\\\"&node_id=\\\"+argsObj.payload.tc2_forecasting.get_trainmodel.node_id+\\\"&kpi_id=\\\"+argsObj.payload.tc2_forecasting.get_trainmodel.kpi_id+\\\"&indexes=\\\"+argsObj.payload.tc2_forecasting.get_trainmodel.indexes,\\r\\n        headers: {\\r\\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n            'Content-Type': 'application/json',\\r\\n            'Accept': 'application/json',\\r\\n        },\\r\\n        failOnStatusCode: false,\\r\\n        body: {}\\r\\n    }).then(resp => {\\r\\n        console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n        let responseStatusCode = \\\"200\\\";\\r\\n        let responseType = \\\"object\\\";\\r\\n        let startTs = (new Date()).getTime()\\r\\n        config.testCaseStartTs = config.currentTs = startTs;\\r\\n        logObj.testCases.push({\\r\\n            name: \\\"train-model\\\",\\r\\n            passFailFlag: 'Pass',\\r\\n            duration: (new Date()).getTime(),\\r\\n            tag: \\\"forecasting\\\",\\r\\n            childTestCases: [\\r\\n                {\\r\\n                    name: 'Is resp.status = 200',\\r\\n                    passFailFlag: 'Fail',\\r\\n                    duration: (new Date()).getTime()\\r\\n                },\\r\\n                {\\r\\n                    name: 'Is resp.isOkStatusCode = true',\\r\\n                    passFailFlag: 'Fail'\\r\\n                }\\r\\n            ]\\r\\n        })\\r\\n\\r\\n        let apiResponse, index = logObj.testCases.length - 1;\\r\\n        apiResponse = resp;\\r\\n        logObj.testCases[index].childTestCases[0] = {\\r\\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n            json: resp.body,\\r\\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        logObj.testCases[index].childTestCases[1] = {\\r\\n            name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        if (resp.status >= 200 && resp.status <= 299) {\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof (resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\\r\\n            return apiResponse;\\r\\n        }\\r\\n    })\\r\\n    /*================================================================= END OF GET TRAIN MODEL API=============================================== */\\r\\n\\r\\n    /*================================================================= START OF POST TRAIN MODEL API=============================================== */\\r\\n\\r\\n\\r\\n    cy.request({\\r\\n        method: \\\"POST\\\",\\r\\n        url: argsObj.payload.baseUrl + \\\"/api/v1/forecast/train-model/\\\",\\r\\n        headers: {\\r\\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n            'Content-Type': 'application/json',\\r\\n            'Accept': 'application/json',\\r\\n        },\\r\\n        failOnStatusCode: false,\\r\\n        body: argsObj.payload.tc2_forecasting.Post_trainmodel ? argsObj.payload.tc2_forecasting.Post_trainmodel : {}\\r\\n    }).then(resp => {\\r\\n        console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n\\r\\n        let responseStatusCode = \\\"200\\\";\\r\\n        let responseType = \\\"object\\\";\\r\\n        let startTs = (new Date()).getTime()\\r\\n        config.testCaseStartTs = config.currentTs = startTs;\\r\\n        logObj.testCases.push({\\r\\n            name: \\\"Forecast/train-model\\\",\\r\\n            passFailFlag: 'Pass',\\r\\n            duration: (new Date()).getTime(),\\r\\n            tag: \\\"forecasting\\\",\\r\\n            childTestCases: [\\r\\n                {\\r\\n                    name: 'Is resp.status = 200',\\r\\n                    passFailFlag: 'Fail',\\r\\n                    duration: (new Date()).getTime()\\r\\n                },\\r\\n                {\\r\\n                    name: 'Is resp.isOkStatusCode = true',\\r\\n                    passFailFlag: 'Fail'\\r\\n                }\\r\\n            ]\\r\\n        })\\r\\n\\r\\n        let apiResponse, index = logObj.testCases.length - 1;\\r\\n\\r\\n        apiResponse = resp;\\r\\n        logObj.testCases[index].childTestCases[0] = {\\r\\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n            json: resp.body,\\r\\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        logObj.testCases[index].childTestCases[1] = {\\r\\n            name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        if (resp.status >= 200 && resp.status <= 299) {\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof (resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\\r\\n            return apiResponse;\\r\\n        }\\r\\n    })\\r\\n    /*================================================================= END OF POST TRAIN MODEL API=============================================== */\\r\\n\\r\\n\\r\\n\\r\\n    /*================================================================= START OF GET ACTUAL-DATA API=============================================== */\\r\\n\\r\\n\\r\\n\\r\\n    cy.request({\\r\\n        method: \\\"GET\\\",\\r\\n        url: argsObj.payload.baseUrl + \\\"/api/v1/forecast/get-actual-data?start_date=\\\"+argsObj.payload.tc2_forecasting.get_actual_data.start_date+\\\"&end_date=\\\"+argsObj.payload.tc2_forecasting.get_actual_data.end_date+\\\"&node_id=\\\"+argsObj.payload.tc2_forecasting.get_actual_data.node_id +\\\"&kpi_id=\\\"+ argsObj.payload.tc2_forecasting.get_actual_data.kpi_id+\\\"&index_id=\\\"+ argsObj.payload.tc2_forecasting.get_actual_data.index_id,\\r\\n        headers: {\\r\\n            'Cookie': 'access=' + accessToken + ';refresh=' + refreshToken + ';TENANT=' + tenant,\\r\\n            'Content-Type': 'application/json',\\r\\n            'Accept': 'application/json',\\r\\n        },\\r\\n        failOnStatusCode: false,\\r\\n        body:{}\\r\\n    }).then(resp => {\\r\\n        console.log('\\\\n\\\\n resp ==>'); console.log(resp);\\r\\n\\r\\n\\r\\n        let responseStatusCode = \\\"200\\\";\\r\\n        let responseType = \\\"object\\\";\\r\\n        let startTs = (new Date()).getTime()\\r\\n        config.testCaseStartTs = config.currentTs = startTs;\\r\\n        logObj.testCases.push({\\r\\n            name: \\\"get-actual-data\\\",\\r\\n            passFailFlag: 'Pass',\\r\\n            duration: (new Date()).getTime(),\\r\\n            tag: \\\"forecasting\\\",\\r\\n            childTestCases: [\\r\\n                {\\r\\n                    name: 'Is resp.status = 200',\\r\\n                    passFailFlag: 'Fail',\\r\\n                    duration: (new Date()).getTime()\\r\\n                },\\r\\n                {\\r\\n                    name: 'Is resp.isOkStatusCode = true',\\r\\n                    passFailFlag: 'Fail'\\r\\n                }\\r\\n            ]\\r\\n        })\\r\\n\\r\\n        let apiResponse, index = logObj.testCases.length - 1;\\r\\n        apiResponse = resp;\\r\\n        logObj.testCases[index].childTestCases[0] = {\\r\\n            name: `Response code should be 2xx. The Response code is ${resp.status}`,\\r\\n            json: resp.body,\\r\\n            passFailFlag: resp.status >= 200 && resp.status <= 299 ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(logObj.testCases[index].childTestCases[0].duration, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        logObj.testCases[index].childTestCases[1] = {\\r\\n            name: `\\\"isOkStatusCode\\\" of Response is true`,\\r\\n            passFailFlag: resp.isOkStatusCode ? 'Pass' : 'Fail',\\r\\n            duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n        };\\r\\n        config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n        if (resp.status >= 200 && resp.status <= 299) {\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Is response body of type' + responseType,\\r\\n                passFailFlag: typeof (resp.body) === \\\"object\\\" ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n            logObj.testCases[index].childTestCases.push({\\r\\n                name: 'Type of response body should be \\\"object\\\" and respBody should not null',\\r\\n                passFailFlag: \\\"object\\\" === \\\"object\\\" && resp.body !== null ? 'Pass' : 'Fail',\\r\\n                duration: Utils.calcTimeDuration(startTs, (new Date()).getTime())\\r\\n            });\\r\\n            config.currentTs = startTs = (new Date()).getTime()\\r\\n\\r\\n            logObj.testCases[index].duration = Utils.calcTimeDuration(config.testCaseStartTs, (new Date()).getTime())\\r\\n            logObj.testCases[index].passFailFlag = logObj.testCases[index].childTestCases.filter(p => p.passFailFlag === 'Fail').length > 0 ? 'Fail' : 'Pass'\\r\\n            return apiResponse;\\r\\n        }\\r\\n    })\\r\\n\\r\\n    /*================================================================= END OF GET ACTUAL-DATA API=============================================== */\\r\\n\\r\\n});\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"saveGeneratedResponse\":false,\"valueOfResponseJQL\":\"\",\"endpointName\":\"General_POST_api_v1_iam_token\",\"fileType\":\"Test-Case\",\"inputData\":[{\"name\":\"payload\",\"type\":\"Fixture\",\"fixture_prop_name\":\"payload\",\"argsObjFlag\":true}],\"outputData\":[{\"name\":\"\",\"value_from_response\":\"\"}],\"isChecked\":true}]"
    },
    {
      "filePath": "e2e/api/matrix/cxpm/forecasting",
      "fileType": "Fixture",
      "fileName": "forecasting-config.json",
      "fileData": "{\"payload\":{\"fieldType\":\"object\",\"fieldValue\":{\"baseUrl\":\"https://10.105.238.236\",\"username\":\"tenant-admin@cisco.com\",\"password\":\"M@trix123\",\"tenant\":\"Cisco\",\"tc1_reporting\":{\"post_report_template\":{\"name\":\"10rkr2\",\"report_type\":1,\"report_content\":1,\"template_description\":\"Testgging nedw \",\"source\":\"Select * from report_template\",\"process\":\"return x\",\"status\":\"TRUE\",\"number_of_columns\":5},\"post_dry_run\":{\"process_code\":\"return x\",\"source\":\"select * from report_template\",\"start_date\":\"2023-09-03 11:51:00\",\"end_date\":\"2023-10-31+11:51:00\"},\"put_report_template\":{\"id\":9,\"name\":\"103\",\"template_description\":\"Testjingttggg new\",\"source\":\"Select * from report_template\",\"data_modal_source\":\"\",\"process\":\"return x\",\"report_content\":1,\"report_type\":\"1\"},\"put_report_template_datamodel\":{\"name\":\"104\",\"report_type\":\"1\",\"template_description\":\"Testingnrrsdsd dfdfdf\",\"report_content\":\"2\",\"source\":\"\",\"data_modal_source\":[\"report_template id\",\"report_template name\",\"report_template source\",\"report_template data_modal_source\"],\"process\":\"return x\"},\"post_scheduler_ondemand\":{\"scheduler_name\":\"105\",\"template\":\"3\",\"report_recipients\":\"ujjwel.dutt@cisco.com,sujeetk4@cisco.com\",\"report_description\":\"sdfsjhdf\",\"report_format\":\"xlsx\",\"start_date\":\"2023-11-02 11:40:00\",\"end_date\":\"2023-11-30 11:40:00\",\"scheduler_type\":\"On-Demand\",\"scheduled_time\":\"00:00\",\"frequency\":\"\",\"status_enabled\":false},\"post_schedular_schedule\":{\"scheduler_name\":\"10eee6\",\"template\":\"3\",\"report_description\":\"Test repggfort scheduler\",\"report_recipients\":\"ujjwel.dutt@cisco.com,sujeetk4@cisco.com\",\"report_format\":\"xlsx\",\"start_date\":\"2023-08-01 11:37:00\",\"end_date\":\"2023-11-30 11:37:00\",\"frequency\":\"Hourly\",\"scheduled_time\":\"17:08\",\"status_enabled\":true,\"scheduler_type\":\"Schedule\"},\"patch_report_scheduler\":{\"scheduler_name\":\"107\",\"template_name\":\"Test_template1\",\"report_description\":\"Test report scheduler TWO\",\"report_format\":\"xlsx\",\"start_date\":\"2023-08-01 11:37:00\",\"end_date\":\"2023-11-30 11:37:00\",\"report_recipients\":\"sujeetk4@cisco.com\",\"frequency\":\"Weekly\",\"scheduled_time\":\"22:13\",\"status_enabled\":true},\"post_catalog_history\":{\"status\":true,\"frequency\":\"MONTHLY\",\"start_time\":\"2023-02-01T00:30\",\"end_time\":\"2023-05-31T00:31\",\"scheduler_type\":\"Schedule\",\"created_by\":1,\"created_on\":\"2023-04-05 18:00:30.791104+00\",\"report_scheduler\":31,\"execute_status\":\"Scheduled\"}},\"tc2_forecasting\":{\"post_forcasting_model\":{\"model_id\":[118],\"period\":1},\"Post_trainmodel\":{\"start_date\":\"2023-09-24 00:00\",\"end_date\":\"2023-09-30 12:00\",\"step\":\"T,min\",\"allow_retrain\":true,\"seasonality\":false,\"samples\":200,\"node_id\":43,\"kpi_id\":17,\"models\":[\"Prophet\"],\"indexes\":[\"16\"]},\"get_trainmodel\":{\"node_id\":43,\"kpi_id\":17,\"models\":\"Prophet\",\"indexes\":\"16\"},\"get_autostep_size\":{\"start_date\":\"2023-09-24 00:00\",\"end_date\":\"2023-09-30 12:00\",\"node_id\":43,\"kpi_id\":17,\"index_id\":[16,14,18]},\"get_actual_data\":{\"start_date\":\"2023-09-24 00:00\",\"end_date\":\"2023-09-30 12:00\",\"node_id\":43,\"kpi_id\":17,\"index_id\":16}},\"tc5_predictive\":{\"post_KPI_on_node\":{\"nodes\":[43]},\"post_indexs_on_KPI\":{\"nodes\":[43],\"kpis\":[1]},\"post_detections\":{\"name\":\"Forexxcakkkkjkst\",\"description\":\"Forecast 1\",\"algorithm_type\":\"Prophet\",\"node_include\":[43],\"kpi_include\":[17],\"index_include\":[14],\"range_unit\":null,\"range_duration\":null,\"is_cron_enabled\":true,\"is_enabled\":true,\"training_start_time\":\"2023-09-24 22:30:00\",\"training_end_time\":\"2023-09-29 22:30:00\",\"cron_start_time\":\"2023-08-03T21:52:00.00+05:30\",\"cron_end_time\":\"2023-09-01T10:30:00\",\"cron_frequency\":\"Weekly\",\"critical_days\":\"11\",\"warning_days\":\"12\",\"threshold_value\":\"12\",\"forecast_period\":\"12\",\"is_percentage\":\"True\",\"crontab\":{\"minute\":\"0\",\"hour\":\"0\",\"day_of_week\":\"*\",\"day_of_month\":\"*\",\"month_of_year\":\"*\",\"timezone\":\"UTC\"}},\"put_detections\":{\"is_enabled\":true,\"is_cron_enabled\":false,\"name\":\"updated detection\",\"description\":\"description\",\"algorithm_type\":\"Prophet\",\"range_unit\":null,\"range_duration\":1,\"training_start_time\":\"2023-01-01 10:30:00\",\"training_end_time\":\"2023-02-01 10:30:00\",\"crontab\":{\"minute\":\"*\",\"hour\":\"*\",\"day_of_week\":\"*\",\"day_of_month\":\"*\",\"month_of_year\":\"*\",\"timezone\":\"UTC\"},\"cron_start_time\":\"2023-08-01T10:30:00\",\"cron_end_time\":\"2023-09-01T10:30:00\",\"cron_frequency\":\"Weekly\",\"critical_days\":10,\"warning_days\":15,\"threshold_value\":50,\"forecast_period\":10,\"is_percentage\":false,\"retention_policy\":10,\"node_include\":[1],\"kpi_include\":[2],\"index_include\":[1]},\"post_audit\":{\"schedule\":\"Daily\",\"status_of_detection\":\"FAILED\",\"success_percentage\":\"50.00\",\"detection_id\":1},\"post_demand_onrun\":{\"detection_id\":1}}},\"files\":[]}}"
    }
  ]
}
